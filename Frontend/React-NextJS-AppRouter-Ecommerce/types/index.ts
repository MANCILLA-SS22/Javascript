import { z } from "zod";
import { cartItemSchema, insertCartSchema, insertOrderItemSchema, insertOrderSchema, insertProductSchema, paymentMethodSchema, paymentResultSchema, shippingAddressSchema, signInFormSchema } from "@/lib/constants/validators";
import { JsonValue } from "@prisma/client/runtime/library";

export type User = { 
    id: string, 
    name: string, 
    email: string, 
    emailVerified: Date | null, 
    image: string | null, 
    password: string | null, 
    address: JsonValue, 
    payment: string | null, 
    role: string, 
    createdAt: Date, 
    updatedAt: Date 
} | null

export type Product = z.infer<typeof insertProductSchema> & { id: string; rating: string; createdAt: Date; };
export type Cart = z.infer<typeof insertCartSchema>;
export type CartItem = z.infer<typeof cartItemSchema>;
export type UserSignUp = z.infer<typeof signInFormSchema>;
export type ShippingAddress = z.infer<typeof shippingAddressSchema>;
export type PaymentMethods = z.infer<typeof paymentMethodSchema>;
export type OrderItem = z.infer<typeof insertOrderItemSchema>;
export type Order = z.infer<typeof insertOrderSchema> & { //(1)
    id: string;
    createdAt: Date;
    isPaid: Boolean;
    paidAt: Date | null;
    isDelivered: Boolean;
    deliveredAt: Date | null;
    orderitem: OrderItem[];
    user: { name: string; email: string };
};
export type PaymentResult = z.infer<typeof paymentResultSchema>

//(1)
// This schema is likely used for creating a new order item — that is, for the input when a client submits a new item to add to an order. So, we only include the fields that the client is expected to send.
// For example: productId, name, qty, etc. — all of these are user-provided when they add something to their cart or place an order.

// But fields like:
// - id(auto-generated by the database),
// - createdAt(automatically set when the record is created),
// - isPaid, paidAt, etc. (set later, by the system or admins)
// ...are not meant to be provided by the user, so they are not included in the insertOrderItemSchema.
// When we want to define the complete shape of a full order item, such as for output(like an API response or a database model), we do want those additional fields.

// Here, we take the base schema(input structure), and extend it with fields that are:
// - Generated or managed by the system / database
// - Useful for the front - end to display
// - Not part of the insert / create logic

// Purpose	                    Fields Included
// insertOrderItemSchema	    Only fields needed to create an item(productId, qty, etc.)
// Full Type with & { ... }	    Everything else, like system - generated fields, used for display / output

// This separation follows best practices for validation and security: only validate what you expect the user to send, and keep system logic separate.