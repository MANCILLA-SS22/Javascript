                                                                                                                   MONGODB
                                                                                                                   
- Usar mongodb en la terminal: 
  1) correr .\mongod.exe  en powershell
  2) Abrir otra ventana de powershell y copiar el siguiente link --> cd 'C:\Program Files\MongoDB\Server\7.0\bin'
  3) Despues ejecutar --> .\mongos.exe                                                                                                            

- Base de datos: Una base de datos no es más que una recopilación organizada de datos. Dichos datos deben compartir algún contexto y son almacenados con poder convertirse posteriormente en información útil para utilizarse dentro de algún
  sistema. La base de datos sólo se encargará de almacenar dichos datos.
  Algunas de las cosas que podemos señalar sobre la utilidad de una base de datos son:
   ✓ Almacenamiento más seguro: Los datos que viven en una base de datos no son modificables directamente, por lo que éstos no pueden ser cambiados tan fácilmente.
   ✓ Segmentación de datos: Podemos separar los datos en “contextos”, permitiendo así tener separados los datos de interés. 
     ○ Separar clientes potenciales de clientes sólo interesados. 
     ○ Separar productos existentes de productos fuera de stock 
     ○ Separar diferentes usuarios por género, nacionalidad, plan, etc.
   ✓ Gestión sencilla una vez configurada: Una vez que hemos definido los esquemas principales de nuestra base de datos, podremos realizar operaciones sobre estos datos como:
   ✓ Filtrar
   ✓ Ordenar
   ✓ Buscar datos específicos.
   ✓ Actualizar un conjunto de datos sin afectar o tocar otros datos.

- Modelo relacional: Gestión de datos que consiste en representar éstos como tablas relacionadas con el fin de brindar una estructura de relación sólida entre ellos.
- Modelo no relacional: Gestión de datos flexible que sustituye las tablas relacionadas, por colecciones, garantizando facilidad y dinamismo en el manejo de los datos.
- Base de datos relacional: se refiere a estructura, elación, dependencia y de cambio controlado.
- Base de datos no relacional:  refiere a algo enos estructurado, con relaciones y ependencias más flexibles, y de cambios umamente rápidos.

- Inconsistencia de datos

- CRUD: es un acrónimo que hace referencia a las cuatro operaciones fundamentales de una base de datos:
  ✓ C : Create (Crear un dato, insertarlo en la base de datos)
  ✓ R : Read (Leer un dato, mostrarlo al cliente)
  ✓ U : Update (Actualizar un dato, cambiar su información interna)
  ✓ D : Delete (Eliminar un dato, removerlo de nuestra colección.
  
  
- Comandos de apoyo
  ✓ show dbs : Muestra las bases de datos existentes.
  ✓ use <db name>: Crea una nueva base de datos (en caso de no existir) y se posiciona sobre ella
  ✓ db: Muestra en qué base de datos estamos posicionado.
  ✓ show collections: Muestra todas las colecciones disponibles en la base de datos posicionada.
  ✓ db.createCollection(name): Crea una colección en la base de datos posicionada.
  ✓ db.dropDatabase(): Elimina la base de datos actual.
  ✓ db.collection.drop(): Elimina la colección de la base de datos posicionada.

- Primeros comandos CRUD: CR
  ✓ db.collection.insertOne(doc) : Agrega un nuevo documento a la colección seleccionada.
  ✓ db.collection.insertMany(docs): Agrega múltiples documentos a la colección seleccionada (dado un arreglo de documentos).
  ✓ db.collection.findOne(opt): Busca un elemento que cumpla con los criterios de búsqueda (opt), devuelve el primer documento que cumpla con dicho criterio.
  ✓ db.collection.find(opt):Devuelve todos los documentos que cumplan con dicho criterio.
  ✓ db.collection.find(opt).pretty(): Añadido para hacer más presentables los resultados de un find()    

- Conteo de datos: Los comandos de conteo para determinar el número de documentos en una colección son
  ✓ db.collection.estimatedDocumentC count() Cuenta el estimado más próximo al número de documentos según su metadata.
  ✓ db.collection.countDocuments(opt) Cuenta los documentos que cumplan con el criterio definido en las opciones (opt).
  
- opt (options): agregando opciones
  En muchas consultas encontramos el elemento (opt), esto hace referencia a las opciones de filtros de búsqueda que podemos realizar al momento de buscar un valor, la sintaxis elemental de un opt es: {propiedad:valor}
                                                                             db.users.find({gender: "M})
        
- Filtros: Las búsquedas del mundo real no siempre requieren que un valor sea igual a otro. En ocasiones necesitamos que sea menor, mayor, diferente de, entre otras cosas. Los filtros pueden agregarse dentro de los elementos de criterio 
  (opt) con ayuda del símbolo $, además, podemos agregar más de un filtro para asegurarnos que el documento se ajuste a criterios muy específicos. Entonces, la sintaxis general será:
                                                                             db.coll.find( {key: {$operator: val}} )
                                                                             
- MongoDB: Operadores para Filtros de Query
  ✓ $and: Realiza operación AND -> sintaxis: {$and: [ {},{} ] }
  ✓ $or: Realiza operación OR -> sintaxis: {$or: [ {},{} ] }
  ✓ $lt: Coincide con valores que son menores que un valor especificado.
  ✓ $lte: Coincide con valores menores o iguales a un valor especificado.
  ✓ $gt: Coincide con valores mayores a un valor especificado.
  ✓ $gte: Coincide con valores mayores o iguales a un valor especificado.
  ✓ $ne: Coincide con valores que no son iguales a un valor especificado.
  ✓ $eq: Selecciona los documentos que son iguales a un valor especificado.                                                                                        
  ✓ $exists: Selecciona los documentos según la existencia de un campo.
  ✓ $in: Selecciona los documentos especificados en un array. sintaxis: {key:{$in: [array of values] } }
  ✓ $nin: Coincide con ninguno de los valores especificados en un array.
  ✓ $size: Coincide con el número de elementos especificados.
  ✓ $all: Coincide con todos los valores definidos dentro de un array.
  ✓ $elemMatch: Coincide con algún valor definido dentro del query.                                                                                             
  
- MongoDB: Búsqueda Avanzada
  ✓ db.coll.distinct( val ) devuelve un array con los distintos valores que toma un determinado campo en los documentos de la colección.
  ✓ db.coll.find({doc.subdoc:value}) Se utiliza para filtrar subdocumentos.
  ✓ db.coll.find({name: /^Max$/i}) filtra utilizando expresiones regulares
  
- Proyecciones: En ocasiones no necesitamos toda la información de un documento. Si tenemos un documento con 100 propiedades, podemos definir sólo las propiedades que queremos obtener.
  Una proyección se incluye al momento de hacer una búsqueda, (siempre como segundo argumento) y es el equivalente a decirle a la base de datos: “sólo necesito ésto”
  Así, podríamos decir db.users.find({},{name:1}); Lo cual indica que, el campo “name” es el único que necesitamos obtener por parte del documento, ahorrándonos espacio y complejidad en el resultado
  
- Sort: Sirve para poder hacer un ordenamiento de la información. El ordenamiento se define con 1 o -1 para hacer el ordenamiento ascendente o descendente respectivamente.
  La sintaxis es: db.collection.find().sort({val_A:1,val_B:-1})
  La razón por la cual podemos agregar múltiples valores de ordenamiento, es en caso de que dos documentos tengan el mismo valor, podamos ordenarlos bajo otro criterio  
  
- Skip: Omite el número de documentos indicados:Podemos usarlo cuando hagamos paginaciones, cuando necesitemos ignorar un valor que sabemos que es innecesario, etc. Su sintaxis es: .skip(offset)
- Limit: Limita el número de documentos devueltos. De manera que podamos hacer diferentes niveles de paginación (Tu página puede devolver 5 elementos por página, o bien 100, tú decides). Su sintaxis es: .limit(num)  
  
- CRUD (update): Las operaciones Update se pueden realizar de dos maneras: Actualizar un documento, o actualizar múltiples documentos.
  ✓ db.collection.updateOne(query,update,option)
  ✓ query: sirve para filtrar qué elementos actualizar (usa los filtros iguales al find)
  ✓ update: Apartado para indicar qué actualizar de los documentos que cumplen con el filtro. Update tiene sus propios operadores como $set, $unset, $inc, $rename, $mul, $min, $max
  ✓ option: Opciones a tomar en cuenta para la actualización (como upsert, que inserta el valor en caso de que el documento a actualizar ni siquiera exista).
  ✓ db.collection.updateMany(query,update,options) Actualiza múltiples documentos que cumplan con el criterio.
  
- CRUD (Delete): Nuestra última operación es para eliminar datos, si bien hay muchas variantes de una eliminación, sólo veremos las dos principales.
✓ db.collection.deleteOne({key:val}) : Elimina sólo el primer elemento que cumpla con el criterio, se usa principalmente para encontrar identificadores específicos. Se recomienda no utilizar si somos conscientes de que el valor a buscar no 
   es repetido.
✓ db.collection.deleteMany({key:val}) : Elimina todos los documentos que cumplan con el criterio, se usa cuando sabemos que más de un valor va a contar con ese valor y necesitamos hacer una limpieza general.  


- Mongoose (population): Operación que permite transformar la referencia de un documento en su documento correspondiente en la colección indicada.
  Una population implica obtener un documento referenciado dentro de otro documento, con el fin de obtener ambos en una sola búsqueda. Consiste en almacenar el id de un documento, como propiedad de otro documento. A esto se le     
  conoce como “referencia”. Populate hace referencia a “poblar” de un id a un documento completo. (referencia a la población humana).
  Algunas cosas a considerar antes de comenzar con su uso:
    ✓ populate es un método propio de mongoose, por lo que tenemos que instalarlo.
    ✓ Hay que tener siempre claro el nombre de la propiedad dentro del objeto, así también como la referencia de la colección, para poder hacer un populate efectivo.
    ✓ Recuerda no guardar directamente el valor a referenciar en el _id, sino asignarle otro nombre (se profundizará en el ejemplo).

- Mongoose (indexing): Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query 
  statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.
  Es un recurso utilizado en MongoDB para poder hacer consultas mucho más rápidas al colocarse en una propiedad de un documento. Éste nos permitirá tener una referencia previa al momento de buscar un documento, con el fin de evitar recorrer 
  toda la colección, documento por documento, hasta encontrar dicho valor. El índice se asocia a un atributo del documento y permite que las búsquedas se hagan desde puntos específicos, evitando el recorrido completo de la colección.
  Prever un buen plan de indexación evitará problemas de lentitud en las consultas y se considera una práctica necesaria a nivel enterprise, al momento de configurar los schemas de nuestros distintos modelos
  
  Un índice no debe ser utilizado en todos los campos, sólo deben ser utilizados en los campos que sepamos tienen repercusión en nuestras búsquedas. Colocar un índice en cada campo de cada documento, significa alentar procesos de escritura 
  en cada insert, así también como generar un almacenamiento adicional e innecesario en la base de datos.
  
  > Tipos de indices: Prever un buen plan de indexación evitará problemas de lentitud en las consultas y se considera una práctica necesaria a nivel enterprise, al momento de configurar los schemas de nuestros distintos modelos.
     ✓ compound: Se utiliza cuando requerimos utilizar más de una indexación y queremos definir el orden con el cual se realiza el ordenamiento (ordenando con 1 para ascendente y -1 para descendente, igual que un sort: {campo: 1 , campo: -1}
     ✓ multikey: Se utiliza cuando requerimos hacer una indexación de valores que se encuentran de manera interna en un array.
     ✓ text: Se utiliza para poder basarse en búsquedas de palabras “específicas” con el fin de poder tomar referencia de un texto a partir de dichas palabras.
     ✓ geospatial: Se utiliza para almacenar data geoespacial de dos coordenadas, utiliza una esfera 2d para poder trabajar los datos. 

  > population: Operación que permite transformar la referencia de un documento en su documento correspondiente en la colección indicada.
    Una population implica obtener un documento referenciado dentro de otro documento, con el fin de obtener ambos en una sola búsqueda. Consiste en almacenar el id de un documento, como propiedad de otro documento. A esto se le     
    conoce como “referencia”. Populate hace referencia a “poblar” de un id a un documento completo. (referencia a la población humana).
    Algunas cosas a considerar antes de comenzar con su uso:
      ✓ populate es un método propio de mongoose, por lo que tenemos que instalarlo.
      ✓ Hay que tener siempre claro el nombre de la propiedad dentro del objeto, así también como la referencia de la colección, para poder hacer un populate efectivo.
      ✓ Recuerda no guardar directamente el valor a referenciar en el _id, sino asignarle otro nombre (se profundizará en el ejemplo)

  > Configurando una population por default: Para poder “poblar” el resultado de la operación find() del estudiante y obtener los cursos, fue necesario llamar a “populate” después de la operación. Sin embargo, tener que colocar el populate 
    puede resultar molesto si utilizamos constantemente el modelo de estudiante. Mongoose tiene la posibilidad de definir “middlewares” para sus documentos y modelos con el fin de automatizar operaciones que consideremos recurrentes. 

- Mongoose (aggregation): Consiste en la realización de múltiples operaciones, eneralmente sobre múltiples documentos. ueden utilizarse para:              https://stackoverflow.com/questions/24714166/full-text-search-with-weight-in-mongoose
    ✓ Agrupar documentos con base en un criterio específico.
    ✓ Realizar alguna operación sobre dichos documentos, con el fin de obtener un solo resultado.
    ✓ Analizar cambios de información con el paso del tiempo.

  > Funcionamiento: Los aggregation pipelines consistirán en un conjunto de pasos (stages), donde cada paso corresponderá a una operación a realizar. Podemos definir tantas stages como necesitemos con el fin de llegar a los resultados 
    esperados. Los documentos resultantes de la stage que finalice, se utilizan como “input” de la siguiente stage, y así sucesivamente hasta llegar al final. 
    Un ejemplo de un pipeline de aggregation puede ser: 
    1. Primero filtra los documentos que tengan un valor x mayor a 20 2. Luego ordénalos de mayor a menor 3. Luego en un nuevo campo devuelve el valor máximo 4. Luego en un nuevo campo devuelve el valor mínimo 5. Luego en un nuevo campo 
       devuelve la suma total de todos los documentos

  > Principales stages disponibles en un aggregation pipeline
    ✓ $count : Cuenta el número de documentos disponibles que se encuentren en la stage actual.
    ✓ $group: Permite agrupar los documentos disponibles en nuevos grupos según un criterio especificado. cada grupo cuenta con un _id nuevo, además de los valores acumulados \
    ✓ $limit: Limita el número de documentos que saldrán de dicha stage.
    ✓ $lookup: Permite realizar un “left join” (combinación de campos), de una colección de la misma base de datos a los documentos de la stage actual.
    ✓ $set / $addFields : Agregan una nueva propiedad a los documentos que se encuentren en dicha stage.
    ✓ $skip: Devuelve sólo los documentos que se encuentren después del offset indicado.
    ✓ $sort: Ordena los documentos en la stage actual.
    ✓ $match -->  Devuelve sólo los documentos que cumplan con un criterio de búsqueda, podemos colocar filtros comunes aquí. Filters the document stream to allow only matching documents to pass unmodified into the next pipeline stage. 
      It uses standard MongoDB queries. For each input document, outputs either one document (a match) or zero documents (no match).
    ✓ $group --> Groups input documents by a specified identifier expression and applies the accumulator expression(s), if specified, to each group. Consumes all input documents and outputs one document per each distinct group. The output 
       documents only contain the identifier field and, if specified, accumulated fields.
    ✓ $sum --> Returns a sum of numerical values. Ignores non-numeric values.
    ✓ $first --> Returns the result of an expression for the first document in a group of documents. Only meaningful when documents are in a defined order.
    ✓ $sort ---> Reorders the document stream by a specified sort key. Only the order changes; the documents remain unmodified. For each input document, outputs one document.
    ✓ $push --> returns an array of all values that result from applying an expression to documents.
    ✓ $$ROOT --> significa los resultados del stage anterior
    ✓ $project --> Reshapes each document in the stream, such as by adding new fields or removing existing fields. For each input document, outputs one document. Takes a document that can specify the inclusion of fields, the suppression of 
       the _id field, the addition of new fields, and the resetting of the values of existing fields. Alternatively, you may specify the exclusion of fields.
    ✓ $merge --> Escribe los resultados del pipeline en una colección. Debe ser la última stage del pipeline para poder funcionar.
       Writes the resulting documents of the aggregation pipeline to a collection. The stage can incorporate (insert new documents, merge documents, replace documents, keep existing documents, fail the operation, process documents with a 
       custom update pipeline) the results into an output collection. IT MUST BE USED BY USING A $project BEFORE.    
    
    
- Mongoose (Paginate): Pagination is the process of separating print or digital content into discrete pages. For print documents and some online content, pagination also refers to the automated process of adding consecutive numbers to 
  identify the sequential order of pages.                                  https://stackoverflow.com/questions/5539955/how-to-paginate-with-mongoose-in-node-js
  
  > mongoose-paginate-v2 is a pagination library having a page wrapper. The main usage of the plugin is you can alter the return value keys directly in the query itself so that you don't need any extra code for transformation.                                    

  > Model.paginate([filter], [options], [callback])
    ✓ docs: Los documentos devueltos en la página
    ✓ totalDocs: Los documentos totales de la consulta realizada.
    ✓ limit: Límite de resultados por página.
    ✓ page: Página actual en la que nos encontramos
    ✓ totalPages: Páginas totales que pueden ser solicitadas en la búsqueda.
    ✓ hasNextPage: Indica si es posible avanzar a una página siguiente.
    ✓ nextPage: Página siguiente en la búsqueda
    ✓ hasPrevPage: Indica si es posible retroceder a una página anterior.
    ✓ prevPage: Página anterior en la búsqueda.
    ✓ pagingCounter: Número de documento en relación con la página actual      
    
- Mongoose (properties)
   > index: This will help the database engine to scan through the needed documents and not all of them.
   > virtual: Virtuals are document properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields, while setters are useful for de-composing a single value into 
     multiple values for storage.

- Mongoose (middlewares)
   > document: Document middleware is specific to individual documents (instances of a model). It’s triggered during actions like save, validate, remove, updateOne, and deleteOne.
   > model: Model middleware operates on entire collections of documents. It’s triggered during actions like insertMany.
   > query: Aggregate middleware is for operations performed using MyModel.aggregate(). It allows you to modify aggregation pipelines.
   > aggregation: Query middleware lets you modify queries before or after they are executed. It’s triggered during actions like find, findOne, update, and remove.

- Mongoose (functions): Database logic should be encapsulated within the data model. Mongoose provides 2 ways of doing this, methods and statics. Methods adds an instance method to documents whereas Statics adds static "class" methods to the 
  Models itself.
   > methods: It's a method that it's gonna be available on all documents of a certain collection
   > statics: statics are the methods defined on the Model. Those functions are only used ONLY in the model and that exist ONLY in the model.
