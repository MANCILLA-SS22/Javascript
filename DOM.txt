  > Estructura DOM: 
    ~ Cada etiqueta HTML se transforma en un nodo de tipo "Elemento". La conversión se realiza de forma jerárquica. 
    ~ De esta forma, del nodo raíz solamente pueden derivar los nodos HEAD y BODY.
    ~ Cada etiqueta HTML se transforma en un nodo que deriva del correspondiente a su "etiqueta padre".
    ~ La transformación de las etiquetas HTML habituales genera dos nodos"
      + Nodo elemento: correspondiente a la propia etiqueta HTML.
      + Nodo texto: contiene el texto encerrado por esa etiqueta HTML.
      
  > Tipos de Nodos: La especificación completa de DOM define 12 tipos de nodos, los más usados son:
    ~ Document: Nodo raíz del que derivan todos los demás nodos del  árbol.
    ~ Element: Representa cada una de las etiquetas XHTML. Puede contener atributos y derivar otros nodos de él.
    ~ Attr: Se define un nodo de este tipo para representar cada uno de los atributos de las etiquetas HTML, es decir, uno por cada par atributo=valor.
    ~ Text: Nodo que contiene el texto encerrado por una etiqueta  HTML.
    ~ Comment: Representa los comentarios incluidos en la página HTML.
    
  > Modificar Nodos: En esta seccion se pude modificar un solo nodo con las siguientes comandos.
    ~ Inner Text: La propiedad innerText de un nodo nos permite modificar su nodo de texto. Es decir, acceder y/o modificar el contenido textual de algún elemento del DOM.
    ~ Inner HTML: permite definir el código html interno del elemento seleccionado. El navegador lo interpreta como código HTML y no como contenido de texto, permitiendo desde un string crear una nueva estructura de etiquetas y contenido.
      Al pasar un string con formato de etiquetas html y contenido a través de la propiedad innerHTML, el navegador genera nuevos nodos con su contenido dentro del elemento seleccionado.
    ~ Class Name: A través de la propiedad className de algún nodo seleccionado podemos acceder al atributo class del mismo y definir cuáles van a ser sus clases.
    
  > Agregar o quitar Nodos: 
    ~ Creación de elementos: Para crear elementos se utiliza la función document.createElement(), y se debe indicar el nombre de etiqueta HTML que representará ese elemento. Luego debe agregarse como hijo el nodo creado con append(), al body 
      o a otro nodo del documento actual.
    ~ Eliminar elementos: Se pueden eliminar nodos existentes y nuevos. El método remove() permite eliminar un nodo seleccionado del DOM.
    ~ Obtener datos de Inputs: Para obtener o modificar datos de un formulario HTML desde JS, podemos hacerlo mediante el DOM. Accediendo a la propiedad value de cada input seleccionado.
    
  > Plantillas de texto
    ~ Plantillas Literales: En versiones anteriores a ES6, solía emplearse la concatenación para incluir valores de las variables en una cadena de caracteres (string). Esta forma puede ser poco legible ante un gran número de referencias. En 
      JS ES6 que solventa esta situación son los template strings.
      
    ~ Plantillas Literales e innerHTML: La plantillas son un medio para incluir variables en la estructura HTML de nodos nuevos o existentes , modificando el innerHTML.
    
    ~ Query Selector: El método querySelector() nos permite seleccionar nodos con la misma sintaxis que utilizamos en los selectores de CSS. 
      Lo interesante del querySelector es que también aplica a pseudo-clases de CSS, brindando un nivel más avanzado de precisión:
      let radioChecked = document.querySelector(".radio:checked") 
      Suponiendo que tengo elementos html radio button y quiero seleccionar sólo aquel que esté en checked, ésto lo puedo lograr muy fácil con querySelector y la pseudo-clase :checked de CSS.

    ~ Query Selector All: Query Selector me retorna el primer elemento que coincida con el parámetro de búsqueda, o sea un sólo elemento. Si quiero obtener una colección de elementos puedo utilizar el método querySelectorAll() siguiendo el 
      mismo comportamiento
    
  > Acceder a los Nodos: Existen distintos métodos para acceder a los elementos del DOM empleando en la clase Document.
    ~ getElementById();          The getElementById() method of the Document interface returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if
                                 specified, they're a useful way to get access to a specific element quickly. If you need to get access to an element which doesn't have an ID, you can use querySelector() to find the element using any 
                                 selector. Sirve para acceder a un elemento de la estructura HTML, utilizando su atributo ID como identificación.
    ~ getElementsByClassName();  The getElementsByClassName method of Document interface returns an array-like object of all child elements which have all of the given class name(s). When called on the document object, the complete document 
                                 is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with 
                                 the given class name(s). Sirve para acceder a un conjunto de elementos de la estructura HTML, utilizando su atributo class como identificación. Se retornará un Array de elementos con todas las coincidencias:
    ~ getElementsByTagName();    The getElementsByTagName method of Document interface returns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is 
                                 live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again. Sirve para acceder a un conjunto de elementos de la 
                                 estructura HTML, utilizando su nombre de etiqueta como identificación. Esta opción es la menos específica de todas, ya que es muy probable que las etiquetas se repitan en el código HTML.

- Eventos: Los eventos son la manera que tenemos en Javascript de controlar las acciones de los usuarios, y definir un comportamiento de la página o aplicación cuando se produzcan. Con Javascript es posible definir qué sucede cuando se 
  produce un evento, por ejemplo, cuando se realiza un clic en cierto elemento o se inserta un texto en un determinado campo.
  JavaScript permite asignar una función a cada uno de los eventos. Reciben el nombre de event handlers o manejadores de eventos. Así, ante cada evento, JavaScript asigna y ejecuta la función asociada al mismo.
  Hay que entender que los eventos suceden constantemente en el navegador. JavaScript lo que nos permite hacer es escuchar eventos sobre elementos seleccionados. Cuando escuchamos el evento que esperamos, se ejecuta la función que definimos 
  en respuesta. A esta escucha se la denomina event listener.
  
  > ¿Cómo definir eventos en JS?: 
    ~ El método addEventListener() permite definir qué evento escuchar sobre cualquier elemento seleccionado. El primer parámetro corresponde al nombre del evento y el segundo a la función de respuesta
    ~ Emplear una propiedad del nodo para definir la respuesta al evento. Las propiedades se identifican con el nombre del evento y el prefijo on. También es posible emplear funciones anónimas para definir los manejadores de eventos.
  
  > Eventos más comunes: 
    ~ mouse: Se producen por la interacción del usuario con el mouse. Entre ellos se destacarán los que se encuentran a continuación.
      ✓ mousedown/mouseup: Se oprime/suelta el botón del ratón sobre un elemento.
      ✓ mouseover/mouseout: El puntero del mouse se mueve sobre/sale del elemento.
      ✓ mousemove: El movimiento del mouse sobre el elemento activa el evento. 
      ✓ click: Se activa después de mousedown o mouseup sobre un elemento válido.

    ~ teclado: Se producen por la interacción del usuario con el teclado. Entre ellos se destacarán los que se encuentran a continuación.
      ✓ keydown: Cuando se presiona.
      ✓ keyup: Cuando se suelta una tecla.
      
    ~ change: Se activa cuando se detecta un cambio en el valor del elemento.  Por ejemplo, mientras se escribe en un input de tipo texto no hay evento change, pero cuando se pasa a otra sección de la aplicación entonces sí ocurre. 

    ~ input: Si queremos ejecutar una función cada vez que se tipea sobre el campo, conviene trabajar directamente con el evento input.

    ~ submit: El evento submit se activa cuando el formulario es enviado. Normalmente se utiliza para validar el formulario antes de ser enviado al servidor o bien para abortar el envío y procesarlo con JavaScript



- HTML DOM Documents (Document Object Properties and Methods)
    
    > activeElement	            Returns the currently focused element in the document
    > addEventListener()	      Attaches an event handler to the document
    > adoptNode()	            Adopts a node from another document
    > baseURI	                 Returns the absolute base URI of a document
    > body	                       Sets or returns the document's body (the <body> element)
    > characterSet	            Returns the character encoding for the document
    > close()	                  Closes the output stream previously opened with document.open()
    > cookie	                 Returns all name/value pairs of cookies in the document
    > createAttribute()	        Creates an attribute node
    > createComment()	           Creates a Comment node with the specified text
    > createDocumentFragment()	Creates an empty DocumentFragment node
    > createElement()            Creates an Element node. Se debe indicar el nombre de etiqueta HTML que representará ese elemento. Luego debe agregarse como hijo el nodo Screado con append(), al body o a otro nodo del documento actual.
    > createEvent()	            Creates a new event
    > createTextNode()	       Creates a Text node
    > defaultView	            Returns the window object associated with a document, or null if none is available.
    > designMode	                 Controls whether the entire document should be editable or not.
    > doctype	                Returns the Document Type Declaration associated with the document
    > documentElement	           Returns the Document Element of the document (the <html> element)
    > documentURI	            Sets or returns the location of the document
    > domain	                Returns the domain name of the server that loaded the document
    > embeds	                Returns a collection of all <embed> elements the document
    > forms	                 Returns a collection of all <form> elements in the document
    > getElementById()	       Returns the element that has the ID attribute with the specified value
    > getElementsByClassName()	 Returns an HTMLCollection containing all elements with the specified class name
    > getElementsByName()	      Returns an live NodeList containing all elements with the specified name
    > getElementsByTagName()	Returns an HTMLCollection containing all elements with the specified tag name
    > hasFocus()	                Returns a Boolean value indicating whether the document has focus
    > head	                     Returns the <head> element of the document
    > images	                Returns a collection of all <img> elements in the document
    > implementation	           Returns the DOMImplementation object that handles this document
    > importNode()	            Imports a node from another document
    > lastModified	            Returns the date and time the document was last modified
    > links	                 Returns a collection of all <a> and <area> elements in the document that have a href attribute
    > normalize()	            Removes empty Text nodes, and joins adjacent nodes
    > open()	                Opens an HTML output stream to collect output from document.write()
    > querySelector()	           Returns the first element that matches a specified CSS selector(s) in the document
    > querySelectorAll()	     Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document
    > readyState	                Returns the (loading) status of the document
    > referrer	                Returns the URL of the document that loaded the current document
    > removeEventListener()	     Removes an event handler from the document (that has been attached with the addEventListener() method)
    > scripts	                Returns a collection of <script> elements in the document
    > title	                 Sets or returns the title of the document
    > URL	                    Returns the full URL of the HTML document
    > write()	                Writes HTML expressions or JavaScript code to a document
    > writeln()	                Same as write(), but adds a newline character after each statement    
  
- HTML DOM elements    

    > accessKey	                Sets or returns the accesskey attribute of an element
    > addEventListener()	     Attaches an event handler to an element
    > append()                  This method is used to add an element in form of a Node object or a DOMString (basically means text).
    > appendChild()	           Adds (appends) a new child node to an element
    > attributes	                Returns a NamedNodeMap of an element's attributes
    > blur()	                Removes focus from an element
    > childElementCount	     Returns an elements's number of child elements
    > childNodes	                Returns a NodeList of an element's child nodes
    > children	                Returns an HTMLCollection of an element's child elements
    > classList	                Returns the class name(s) of an element. It returns the CSS classnames of an element or DOMTokenList.
    > className	                Sets or returns the value of the class attribute of an element. Si asignamos algo a elem.className, reemplaza toda la cadena de clases. A veces es lo que necesitamos, pero a menudo queremos agregar o eliminar 
                                una sola clase. Acceso directo al valor del atributo HTML class. También se puede asignar.
    > click()     	            Simulates a mouse-click on an element
    > clientHeight	            Returns the height of an element, including padding
    > clientLeft	                Returns the width of the left border of an element
    > clientTop	                Returns the width of the top border of an element
    > clientWidth	                Returns the width of an element, including padding
    > cloneNode()	                Clones an element
    > closest()	                Searches the DOM tree for the closest element that matches a CSS selector. This is the opposite to the querySelctor() and also traverses the element and its parents (heading toward the document root) until it 
                                finds a node that matches the specified CSS selector.
    > compareDocumentPosition()	Compares the document position of two elements
    > contains()	                Returns true if a node is a descendant of a node
    > contentEditable	            Sets or returns whether the content of an element is editable or not
    
    > dataset                    This read-only property of the HTMLElement interface provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-*              
                                 attribute. We can have  <div id="user" data-id="1234567890" data-user="carinaanand" data-date-of-birth> and do the following: 
                                 const el = document.querySelector("#user");
                                 el.dataset.dateOfBirth = "1960-10-03";
                                 
    > dir	                        Sets or returns the value of the dir attribute of an element
    > firstChild	                Returns the first child node of an element
    > firstElementChild	        Returns the first child element of an element
    > focus()	                    Gives focus to an element
    > getAttribute()	            Returns the value of an element's attribute
    > getAttributeNode()	        Returns an attribute node
    > getBoundingClientRect()	    Returns the size of an element and its position relative to the viewport
    > getElementsByClassName()	Returns a collection of child elements with a given class name
    > getElementsByTagName()	    Returns a collection of child elements with a given tag name
    > hasAttribute()	            Returns true if an element has a given attribute
    > hasAttributes()	            Returns true if an element has any attributes
    > hasChildNodes()	            Returns true if an element has any child nodes
    > id	                     It's used to set or return the id attribute of an element i.e value of the Id Attribute. An ID should be different in a document. It is returned by using the document.getElementById() method. 
    > innerHTML	                Sets or returns the content of an element. Para borrar el contenido que hay dentro de la etiqueta, usamos lo siguiente (aplica para igual para innerText) con comillas vacias: nombre_variable.innerHTML = "";
    > innerText	                Sets or returns the text content of a node and its descendants. Nos permite modificar su nodo de texto. Es decir, acceder y/o modificar el contenido textual de algún elemento del DOM.
    > insertAdjacentElement()	    Inserts a new HTML element at a position relative to an element
    > insertAdjacentHTML()	    Inserts an HTML formatted text at a position relative to an element
    > insertAdjacentText()	    Inserts text into a position relative to an element
    > insertBefore()	            Inserts a new child node before an existing child node
    > isContentEditable	        Returns true if an element's content is editable
    > isDefaultNamespace()	    Returns true if a given namespaceURI is the default
    > isEqualNode()	            Checks if two elements are equal
    > isSameNode()	            Checks if two elements are the same node
    > lang	                    Sets or returns the value of the lang attribute of an element
    > lastChild	                Returns the last child node of an element
    > lastElementChild	        Returns the last child element of an element
    > matches()	                Returns true if an element is matched by a given CSS selector
    > namespaceURI	            Returns the namespace URI of an element
    > nextSibling	                Returns the next node at the same node tree level
    > nextElementSibling	        Returns the next element at the same node tree level
    > nodeName	                Returns the name of a node
    > nodeType	                Returns the node type of a node
    > nodeValue	                Sets or returns the value of a node
    > normalize()	                Joins adjacent text nodes and removes empty text nodes in an element
    > offsetHeight	            Returns the height of an element, including padding, border and scrollbar
    > offsetWidth	                Returns the width of an element, including padding, border and scrollbar
    > offsetLeft	                Returns the horizontal offset position of an element
    > offsetParent	            Returns the offset container of an element
    > offsetTop	                Returns the vertical offset position of an element
    > outerHTML	                Sets or returns the content of an element (including the start tag and the end tag)
    > outerText	                Sets or returns the outer text content of a node and its descendants
    > ownerDocument	            Returns the root element (document object) for an element
    > parentNode	                Returns the parent node of an element
    > parentElement	            Returns the parent element node of an element
    > previousSibling	            Returns the previous node at the same node tree level
    > prepend()                  Inserts specified content at the beginning of the selected elements.
    > previousElementSibling	    Returns the previous element at the same node tree level
    > querySelector()	            Returns the first child element that matches a CSS selector(s). Nos permite seleccionar nodos con la misma sintaxis que utilizamos en los selectores de CSS
    > querySelectorAll()	        Returns all child elements that matches a CSS selector(s). Permite btener una colección de elementos.
    > remove()	                Removes an element from the DOM
    > removeAttribute()	        Removes an attribute from an element
    > removeAttributeNode()	    Removes an attribute node, and returns the removed node
    > removeChild()	            Removes a child node from an element
    > removeEventListener()	    Removes an event handler that has been attached with the addEventListener() method
    > replaceChild()	            Replaces a child node in an element
    > scrollHeight	            Returns the entire height of an element, including padding
    > scrollIntoView()	        Scrolls the an element into the visible area of the browser window
    > scrollLeft	                Sets or returns the number of pixels an element's content is scrolled horizontally
    > scrollTop	                Sets or returns the number of pixels an element's content is scrolled vertically
    > scrollWidth	                Returns the entire width of an element, including padding
    > setAttribute("tag", "nameTag")	            Sets or changes an attribute's value or sets a new value to an attribute. If the attribute does not exist, it is created first.
    > setAttributeNode()	        Sets or changes an attribute node
    > style	                    Sets or returns the value of the style attribute of an element
    > tabIndex	                Sets or returns the value of the tabindex attribute of an element
    > tagName	                    Returns the tag name of an element
    > textContent	                Sets or returns the textual content of a node and its descendants
    > title	                    Sets or returns the value of the title attribute of an element
    > toString()	                Converts an element to a string    
    
- HTML Event Properties
    > altKey	            Returns whether the "ALT" key was pressed when the mouse event was triggered	MouseEvent
    > altKey	            Returns whether the "ALT" key was pressed when the key event was triggered	    KeyboardEvent, TouchEvent
    > animationName	        Returns the name of the animation	                                            AnimationEvent
    > bubbles	            Returns whether or not a specific event is a bubbling event	                     Event
    > button	            Returns which mouse button was pressed when the mouse event was triggered	     MouseEvent
    > buttons	            Returns which mouse buttons were pressed when the mouse event was triggered	    MouseEvent
    > cancelable	        Returns whether or not an event can have its default action prevented	Event
    > changeTouches	        Returns a list of all the touch objects whose state changed between the previous touch and this touch	TouchEvent
    > clientX	            Returns the horizontal coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
    > clientY	            Returns the vertical coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
    > clipboardData	        Returns an object containing the data affected by the clipboard operation	ClipboardData
    > code	                Returns the code of the key that triggered the event	KeyboardEvent
    > composed	            Returns whether the event is composed or not	Event
    > ctrlKey	            Returns whether the "CTRL" key was pressed when the mouse event was triggered	MouseEvent
    > ctrlKey	            Returns whether the "CTRL" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
    > currentTarget	        Returns the element whose event listeners triggered the event. It is the element that the event listener is attached to.	(currentTarget is similar to the "this" keyword)         Event
    > data	                Returns the inserted characters	InputEvent
    > dataTransfer	        Returns an object containing the data being dragged/dropped, or inserted/deleted	DragEvent, InputEvent
    > defaultPrevented	    Returns whether or not the preventDefault() method was called for the event	Event
    > deltaX	            Returns the horizontal scroll amount of a mouse wheel (x-axis)	WheelEvent
    > deltaY	            Returns the vertical scroll amount of a mouse wheel (y-axis)	WheelEvent
    > deltaZ	            Returns the scroll amount of a mouse wheel for the z-axis	WheelEvent
    > deltaMode	            Returns a number that represents the unit of measurements for delta values (pixels, lines or pages)	WheelEvent
    > detail	            Returns a number that indicates how many times the mouse was clicked	UiEvent
    > elapsedTime	        Returns the number of seconds an animation has been running	AnimationEvent
    > elapsedTime	        Returns the number of seconds a transition has been running	 
    > eventPhase	        Returns which phase of the event flow is currently being evaluated	Event
    > getModifierState()	Returns an array containing target ranges that will be affected by the insertion/deletion	MouseEvent
    > inputType	            Returns the type of the change (i.e "inserting" or "deleting")	InputEvent
    > isComposing	        Returns whether the state of the event is composing or not	InputEvent, KeyboardEvent
    > isTrusted	            Returns whether or not an event is trusted	Event
    > key	                Returns the key value of the key represented by the event	KeyboardEvent
    > key	                Returns the key of the changed storage item	Storage         Event
    > location	            Returns the location of a key on the keyboard or device	KeyboardEvent
    > lengthComputable	    Returns whether the length of the progress can be computable or not	ProgressEvent
    > loaded	            Returns how much work has been loaded	ProgressEvent
    > metaKey	            Returns whether the "META" key was pressed when an event was triggered	MouseEvent
    > metaKey	            Returns whether the "meta" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
    > MovementX	            Returns the horizontal coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
    > MovementY	            Returns the vertical coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
    > newValue	            Returns the new value of the changed storage item	StorageEvent
    > newURL	            Returns the URL of the document, after the hash has been changed	HasChangeEvent
    > offsetX	            Returns the horizontal coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
    > offsetY	            Returns the vertical coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
    > oldValue	            Returns the old value of the changed storage item	StorageEvent
    > oldURL	            Returns the URL of the document, before the hash was changed	HasChangeEvent
    > onemptied	            When something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)	 
    > pageX	                Returns the horizontal coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
    > pageY	                Returns the vertical coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
    > persisted	            Returns whether the webpage was cached by the browser	PageTransitionEvent
    > propertyName	        Returns the name of the CSS property associated with the animation or transition	AnimationEvent, TransitionEvent
    > pseudoElement	        Returns the name of the pseudo-element of the animation or transition	AnimationEvent, TransitionEvent
    > region		        MouseEvent
    > relatedTarget	        Returns the element related to the element that triggered the mouse event	MouseEvent
    > relatedTarget	        Returns the element related to the element that triggered the event	FocusEvent
    > repeat	            Returns whether a key is being hold down repeatedly, or not	KeyboardEvent
    > screenX	            Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
    > screenY	            Returns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
    > shiftKey	            Returns whether the "SHIFT" key was pressed when an event was triggered	MouseEvent
    > shiftKey	            Returns whether the "SHIFT" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
    > state	                Returns an object containing a copy of the history entries	PopStateEvent
    > storageArea	        Returns an object representing the affected storage object	StorageEvent
    > target	            Returns the element that triggered the event. It is essentially where the event is originated. So where the event first happened.	Event
    > targetTouches	        Returns a list of all the touch objects that are in contact with the surface and where the touchstart event occured on the same target element as the current target element	TouchEvent
    > timeStamp	            Returns the time (in milliseconds relative to the epoch) at which the event was created	Event
    > total	                Returns the total amount of work that will be loaded	ProgressEvent
    > touches	            Returns a list of all the touch objects that are currently in contact with the surface	TouchEvent
    > transitionend	        A CSS transition has completed	TransitionEvent
    > type	                Returns the name of the event	Event
    > url	                Returns the URL of the changed item's document	StorageEvent
    > view	                Returns a reference to the Window object where the event occurred	UiEvent
    > x	                    Alias for clientX	MouseEvent
    > y	                    Alias for clientY    
    
- HTML DOM events
    > abort	                  The loading of a media is aborted	UiEvent, Event
    > afterprint	          A page has started printing	Event
    > animationend	          A CSS animation has completed	AnimationEvent
    > animationiteration	  A CSS animation is repeated	AnimationEvent
    > animationstart	      A CSS animation has started	AnimationEvent
    > beforeprint	          A page is about to be printed	Event
    > beforeunload	          Before a document is about to be unloaded. the user is leaving the page. we can check if the user saved the changes and ask them whether they really want to leave.       UiEvent, Event
    > blur	                  An element loses focus	FocusEvent
    > canplay	              The browser can start playing a media (has buffered enough to begin)	Event
    > canplaythrough	      The browser can play through a media without stopping for buffering	Event
    > change	              The content of a form element has changed	Event
    > click	                  An element is clicked on	MouseEvent
    > contextmenu	          An element is right-clicked to open a context menu	MouseEvent
    > copy	                  The content of an element is copied	ClipboardEvent
    > cut	                  The content of an element is cutted	ClipboardEvent
    > dblclick	              An element is double-clicked	MouseEvent
    
    > DOMContentLoaded:  The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading. 
      the browser fully loaded HTML, and the DOM tree is built, but external resources like pictures <img> and stylesheets may not yet have loaded. DOM is ready, so the handler can lookup DOM nodes, initialize the interface. 
      DOM is ready, so the handler can lookup DOM nodes, initialize the interface.    
      
    > drag	                  An element is being dragged	DragEvent
    > dragend	              Dragging of an element has ended	DragEvent
    > dragenter	              A dragged element enters the drop target	DragEvent
    > dragleave	              A dragged element leaves the drop target	DragEvent
    > dragover	              A dragged element is over the drop target	DragEvent
    > dragstart	              Dragging of an element has started	DragEvent
    > drop	                  A dragged element is dropped on the target	DragEvent
    > durationchange	      The duration of a media is changed	Event
    > ended	                  A media has reach the end ("thanks for listening")	Event
    > error	                  An error has occurred while loading a file	ProgressEvent, UiEvent, Event
    > focus	                  An element gets focus	FocusEvent
    > focusin	              An element is about to get focus	FocusEvent
    > focusout	              An element is about to lose focus	FocusEvent
    > fullscreenchange	      An element is displayed in fullscreen mode	Event
    > fullscreenerror	      An element can not be displayed in fullscreen mode	Event
    > hashchange	          There has been changes to the anchor part of a URL	HashChangeEvent
    > input	                  An element gets user input	InputEvent, Event
    > invalid	              An element is invalid	Event
    > keydown	              A key is down	KeyboardEvent
    > keypress	              A key is pressed	KeyboardEvent
    > keyup	                  A key is released	KeyboardEvent
    > load	                An object has loaded. This event is fired when the whole webpage (HTML) has loaded fully, including all dependent resources, including JavaScript files, CSS files, and images.	         UiEvent, Event
                           not only HTML is loaded, but also all the external resources: images, styles etc. External resources are loaded, so styles are applied, image sizes are known etc.
    > loadeddata	          Media data is loaded	Event
    > loadedmetadata	      Meta data (like dimensions and duration) are loaded	Event
    > loadstart	              The browser starts looking for the specified media	ProgressEvent
    > message	              A message is received through the event source	Event
    > mousedown	              The mouse button is pressed over an element	MouseEvent
    > mouseenter	          The pointer is moved onto an element	MouseEvent
    > mouseleave	          The pointer is moved out of an element	MouseEvent
    > mousemove	              The pointer is moved over an element	MouseEvent
    > mouseover	              The pointer is moved onto an element	MouseEvent
    > mouseout	              The pointer is moved out of an element	MouseEvent
    > mouseup	              A user releases a mouse button over an element	MouseEvent
    > offline	              The browser starts working offline	Event
    > online	              The browser starts working online	Event
    > open	                  A connection with the event source is opened	Event
    > pagehide	              User navigates away from a webpage	PageTransitionEvent
    > pageshow	              User navigates to a webpage	PageTransitionEvent
    > paste	                  Some content is pasted in an element	ClipboardEvent
    > pause	                  A media is paused	Event
    > play	                  The media has started or is no longer paused	Event
    > playing	              The media is playing after beeing paused or buffered	Event
    > popstate	              The window's history changes	PopStateEvent
    > progress	              The browser is downloading media data	Event
    > ratechange	          The playing speed of a media is changed	Event
    > resize	              The document view is resized	UiEvent, Event
    > reset	                  A form is reset	Event
    > scroll	              An scrollbar is being scrolled	UiEvent, Event
    > search	              Something is written in a search field	Event
    > seeked	              Skipping to a media position is finished	Event
    > seeking	              Skipping to a media position is started	Event
    > select	              User selects some text	UiEvent, Event
    > show	                  A <menu> element is shown as a context menu	Event
    > stalled	              The browser is trying to get unavailable media data	Event
    > storage	              A Web Storage area is updated	StorageEvent
    > submit	              A form is submitted	Event
    > suspend	              The browser is intentionally not getting media data	Event
    > timeupdate	          The playing position has changed (the user moves to a different point in the media)	Event
    > toggle	              The user opens or closes the <details> element	Event
    > touchcancel	          The touch is interrupted	TouchEvent
    > touchend	              A finger is removed from a touch screen	TouchEvent
    > touchmove	              A finger is dragged across the screen	TouchEvent
    > touchstart	          A finger is placed on a touch screen	TouchEvent
    > transitionend	          A CSS transition has completed	TransitionEvent
    > unload	              A page has unloaded. the user is leaving the page. the user almost left, but we still can initiate some operations, such as sending out statistics.    	UiEvent, Event
    > volumechange	          The volume of a media is changed (includes muting)	Event
    > waiting	              A media is paused but is expected to resume (e.g. buffering)	Event
    > wheel	                  The mouse wheel rolls up or down over an element	WheelEvent    
    
- addEventListener DOM Event Types
    > Mouse Events:    click, dblclick, mousedown, mouseup, contextmenu, mouseout, mousewheel, mouseover
    > Touch Events:    touchstart, touchend, touchmove, touchcancel
    > Keyboard Events: keydown, keyup, keypress
    > Form Events:     focus, blur, change, submit, input
    > Window Events:   resize, scroll, load, unload, hashchange    
           
- Finding HTML Elements
    > document.getElementById(id)	        Find an element by element id
    > document.getElementsByTagName(name)	   Find elements by tag name
    > document.getElementsByClassName(name)	Find elements by class name

- Changing HTML Elements
    > element.innerHTML =  new html content	Change the inner HTML of an element
    > element.attribute = new value	        Change the attribute value of an HTML element
    > element.style.property = new style	    Change the style of an HTML element
    > element.setAttribute(attribute, value)	Change the attribute value of an HTML element

- Adding and Deleting Elements
    > document.createElement(element)	   Create an HTML element
    > document.removeChild(element)	   Remove an HTML element
    > document.appendChild(element)	   Add an HTML element
    > document.replaceChild(new, old)	   Replace an HTML element
    > document.write(text)	           Write into the HTML output stream
    
- Attribute Properties
    > name	      Returns an attribute's name
    > value	Sets or returns an attribute's value. Para obtener o modificar datos de un formulario HTML desde JS, podemos hacerlo mediante el DOM. Accediendo a la propiedad value de cada input seleccionado.
    > specified	Returns true if the attribute is specified
    
- NamedNodeMap Properties and Methods
    > getNamedItem()	      Returns an attribute node (by name) from a NamedNodeMap
    > item()	           Returns an attribute node (by index) from a NamedNodeMap
    > length	           Returns the number of attributes in a NamedNodeMap
    > removeNamedItem()	Removes an attribute (node)
    > setNamedItem()	     Sets an attribute (node) by name  
    > namedItem()	     Returns the element with a specified id

- HTML DOM NodeList
    > entries()	Returns an Iterator with the key/value pairs from the list
    > forEach()	Executes a callback function for each node in the list
    > item()	Returns the node at a specified index
    > keys()	Returns an Iterator with the keys from the list
    > length	Returns the number of nodes in a NodeList
    > values()	Returns an Iterator with the values from the list
    
- HTML DOM Event Methods

    > getModifierState()	          Returns true if a specified key is activated MouseEvent
    > getTargetRanges()	          Returns an array containing target ranges that will be affected by the insertion/deletion InputEvent
    > preventDefault()	          Cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur Event
    > stopImmediatePropagation()	     Prevents other listeners of the same event from being called Event
    > stopPropagation()	          Prevents further propagation of an event during event flow    
         
- Adding Events Handlers
    > document.getElementById(id).onclick = function(){code}	Adding event handler code to an onclick event

- Finding HTML Objects
    > document.anchors	            Returns all <a> elements that have a name attribute
    > document.baseURI	            Returns the absolute base URI of the document
    > document.body	                Returns the <body> element
    > document.cookie	                Returns the document's cookie
    > document.doctype	            Returns the document's doctype
    > document.documentElement	    Returns the <html> element
    > document.documentMode	        Returns the mode used by the browser
    > document.documentURI	        Returns the URI of the document
    > document.domain	                Returns the domain name of the document server
    > document.embeds	                Returns all <embed> elements
    > document.forms	                Returns all <form> elements
    > document.head	                Returns the <head> element
    > document.images	                Returns all <img> elements
    > document.implementation	        Returns the DOM implementation
    > document.inputEncoding	        Returns the document's encoding (character set)
    > document.lastModified	        Returns the date and time the document was updated
    > document.links	                Returns all <area> and <a> elements that have a href attribute
    > document.readyState	            Returns the (loading) status of the document
    > document.referrer	            Returns the URI of the referrer (the linking document)
    > document.scripts	            Returns all <script> elements
    > document.strictErrorChecking	Returns if error checking is enforced
    > document.title	                Returns the <title> element
    > document.URL	                Returns the complete URL of the document    
    
- classList Properties and Methods

    > add()   	Adds one or more tokens to the list. Adds an option to a drop-down list
    > contains()	Returns true if the list contains a class
    > entries()	Returns an Iterator with key/value pairs from the list
    > forEach()	Executes a callback function for each token in the list
    > item()	Returns the token at a specified index
    > keys()	Returns an Iterator with the keys in the list
    > length	Returns the number of tokens in the list
    > remove()	Removes one or more tokens from the list. Removes an option from a drop-down list
    > replace()	Replaces a token in the list
    > supports()	Returns true if a token is one of an attribute's supported tokens
    > toggle()	Toggles between tokens in the list. It removes an existing token from the list and returns false. If the token doesn't exist it's added and the function returns true. 
                Permite cada vez que se ejecute cambiar de estado la visibilidad del elemento HTML, es decir si está visible pasa a oculto y si se encuentra oculto pasa a visible.
    > value      Returns the token list as a string
    > values()	Returns an Iterator with the values in the list   
    
- HTML DOM Image Object
    > align	      Use style.cssFloat instead. Sets or returns the value of the align attribute of an image
    > alt	          Sets or returns the value of the alt attribute of an image
    > border	     Use style.border instead. Sets or returns the value of the border attribute of an image
    > complete	     Returns whether or not the browser is finished loading an image
    > crossOrigin	 Sets or returns the CORS settings of an image
    > height	     Sets or returns the value of the height attribute of an image
    > hspace	     Use style.margin instead. Sets or returns the value of the hspace attribute of an image
    > isMap	         Sets or returns whether an image should be part of a server-side image-map, or not
    > longDesc	     Sets or returns the value of the longdesc attribute of an image
    > lowsrc	     Sets or returns a URL to a low-resolution version of an image
    > name	            Use id instead. Sets or returns the value of the name attribute of an image
    > naturalHeight	 Returns the original height of an image
    > naturalWidth	 Returns the original width of an image
    > src	           Sets or returns the value of the src attribute of an image
    > useMap	     Sets or returns the value of the usemap attribute of an image
    > vspace	     Use style.margin instead. Sets or returns the value of the vspace attribute of an image
    > width	         Sets or returns the value of the width attribute of an image
    
- onclick events
    > onclick	     The user clicks on an element
    > oncontextmenu	The user right-clicks on an element
    > ondblclick	      The user double-clicks on an element
    > onmousedown	A mouse button is pressed over an element
    > onmouseenter	The pointer is moved onto an element
    > onmouseleave	The pointer is moved out of an element
    > onmousemove	The pointer is moving over an element
    > onmouseout	     The mouse pointer moves out of an element
    > onmouseover	The mouse pointer is moved over an element
    > onmouseup	      The mouse button is released over an element   
    
- Input Search Object Properties
    > autocomplete	  Sets or returns the value of the autocomplete attribute of a search field
    > autofocus	      Sets or returns whether a search field should automatically get focus when the page loads
    > defaultValue	  Sets or returns the default value of a search field
    > disabled	      Sets or returns whether a search field is disabled, or not
    > form	          Returns a reference to the form that contains the search field
    > list	          Returns a reference to the datalist that contains the search field
    > maxLength	      Sets or returns the value of the maxlength attribute of a search field
    > name	          Sets or returns the value of the name attribute of a search field
    > pattern	      Sets or returns the value of the pattern attribute of a search field
    > placeholder	  Sets or returns the value of the placeholder attribute of a search field
    > readOnly	      Sets or returns whether the search field is read-only, or not
    > required	      Sets or returns whether the search field must be filled out before submitting a form
    > size	          Sets or returns the value of the size attribute of the search field
    > type	          Returns which type of form element the search field is
    > value	    Sets or returns the value of the value attribute of a search field. Para obtener o modificar datos de un formulario HTML desde JS, podemos hacerlo mediante el DOM. Accediendo a la propiedad value de cada input deseado.

- Input Search Object Methods
    > Method	Description
    > blur()	Removes focus from a search field
    > focus()	Gives focus to a search field
    > select()	Selects the content of a search text field
    
- DOM node types               
    ~ Document:                   Nodo raíz del que derivan todos los demás nodos del  árbol.
    ~ Element:                       Representa cada una de las etiquetas XHTML. Puede contener atributos y derivar otros nodos de él.
    ~ Attr:                    Se define un nodo de este tipo para representar cada uno de los atributos de las etiquetas HTML, es decir, uno por cada par atributo=valor.
    ~ Text:                     Nodo que contiene el texto encerrado por una etiqueta  HTML.
    ~ Comment:                   Representa los comentarios incluidos en la página HTML.                
    > Document	                 Represents the entire document (the root-node of the DOM tree)	                          Element (max. one), ProcessingInstruction, Comment, DocumentType
    > DocumentFragment	         Represents a "lightweight" Document object, which can hold a portion of a document	     Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
    > DocumentType	             Provides an interface to the entities defined for the document	                           None
    > ProcessingInstruction	     Represents a processing instruction	                                                 None
    > EntityReference	         Represents an entity reference	                                                            Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
    > Element	                 Represents an element	                                                                 Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference
    > Attr	                     Represents an attribute	                                                                Text, EntityReference
    > Text	                     Represents textual content in an element or attribute	                                      None
    > CDATASection	             Represents a CDATA section in a document (text that will NOT be parsed by a parser)	      None
    > Comment	                 Represents a comment	                                                                      None
    > Entity	                 Represents an entity	                                                                      Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
    > Notation	                 Represents a notation declared in the DTD	                                                 None
    
- Console Object Methods

    > assert()	         Writes an error message to the console if a assertion is false
    > clear()	             Clears the console
    > count()	             Logs the number of times that this particular call to count() has been called
    > error()              Outputs an error message to the console
    > group()	             Creates a new inline group in the console. This indents following console messages by an additional level, until console.groupEnd() is called
    > groupCollapsed()	 Creates a new inline group in the console. However, the new group is created collapsed. The user will need to use the disclosure button to expand it
    > groupEnd()	         Exits the current inline group in the console
    > info()	             Outputs an informational message to the console
    > log()	             Outputs a message to the console
    > table()	             Displays tabular data as a table
    > time()	             Starts a timer (can track how long an operation takes)
    > timeEnd()	         Stops a timer that was previously started by console.time()
    > trace()	             Outputs a stack trace to the console
    > warn()	             Outputs a warning message to the console    
    
    
- Window Object properties and Methods
    > closed	      Returns a boolean true if a window is closed.
    > console	      Returns the Console Object for the window.
    > document	      Returns the Document object for the window.
    > frameElement	  Returns the frame in which the window runs.
    > frames	      Returns all window objects running in the window.
    > history	      Returns the History object for the window.
    > innerHeight	  Returns the height of the window's content area (viewport) including scrollbars
    > innerWidth	  Returns the width of a window's content area (viewport) including scrollbars
    > length	      Returns the number of <iframe> elements in the current window
    > localStorage	  Allows to save key/value pairs in a web browser. Stores the data with no expiration date
    > location	      Returns the Location object for the window.
    > name	          Sets or returns the name of a window
    > navigator	      Returns the Navigator object for the window.
    > opener	      Returns a reference to the window that created the window
    > outerHeight	  Returns the height of the browser window, including toolbars/scrollbars
    > outerWidth	  Returns the width of the browser window, including toolbars/scrollbars
    > pageXOffset	  Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window
    > pageYOffset	  Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window
    > parent	      Returns the parent window of the current window
    > screen	      Returns the Screen object for the window
    > screenLeft	  Returns the horizontal coordinate of the window relative to the screen
    > screenTop	      Returns the vertical coordinate of the window relative to the screen
    > screenX	      Returns the horizontal coordinate of the window relative to the screen
    > screenY	      Returns the vertical coordinate of the window relative to the screen
    > sessionStorage  Allows to save key/value pairs in a web browser. Stores the data for one session
    > scrollX	      An alias of pageXOffset
    > scrollY	      An alias of pageYOffset
    > self	          Returns the current window
    > top	          Returns the topmost browser window
    
    > addEventListener()	      Attaches an event handler to the window
    > alert()	                  Displays an alert box with a message and an OK button
    > atob()	                  Decodes a base-64 encoded string
    > blur()	                  Removes focus from the current window
    > btoa()	                  Encodes a string in base-64
    > clearInterval()	          Clears a timer set with setInterval()
    > clearTimeout()	          Clears a timer set with setTimeout()
    > close()	                  Closes the current window
    > confirm()	                  Displays a dialog box with a message and an OK and a Cancel button
    > focus()	                  Sets focus to the current window
    > getComputedStyle()	      Gets the current computed CSS styles applied to an element
    > getSelection()	          Returns a Selection object representing the range of text selected by the user
    > matchMedia()	              Returns a MediaQueryList object representing the specified CSS media query string
    > moveBy()	                  Moves a window relative to its current position
    > moveTo()	                  Moves a window to the specified position
    > open()	                  Opens a new browser window
    > print()	                  Prints the content of the current window
    > prompt()	                  Displays a dialog box that prompts the visitor for input
    > removeEventListener()	      Removes an event handler from the window
    > requestAnimationFrame()	  Requests the browser to call a function to update an animation before the next repaint
    > resizeBy()	              Resizes the window by the specified pixels
    > resizeTo()	              Resizes the window to the specified width and height
    > scrollBy()	              Scrolls the document by the specified number of pixels
    > scrollTo()	              Scrolls the document to the specified coordinates
    > setInterval()	              Calls a function or evaluates an expression at specified intervals (in milliseconds)
    > setTimeout()	              Calls a function or evaluates an expression after a specified number of milliseconds
    > stop()	                  Stops the window from loading       
    
    
- Difference between window, screen and document: 
  ~ window. It is the main JavaScript object root, the global object in a browser, and it can also be treated as the root of the document object model. It is the first thing that gets loaded into the browser. This window object has the 
    majority of the properties like length, innerWidth, innerHeight, name, if it has been closed, its parents, and more.
  
  ~ document: It is the main object of the potentially visible (or better yet: rendered) document object model/DOM. The document object is your html, aspx, php, or other document that will be loaded into the browser. The document actually 
    gets loaded inside the window object and has properties available to it like title, URL, cookie, etc. What does this really mean? That means if you want to access a property for the window it is window.property, if it 
    is document it is window.document.property which is also available in short as document.property.
  
  Since window is the global object, you can reference any properties of it with just the property name - so you do not have to write down window. - it will be figured out by the runtime.
        
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$        
