/* 

Ejemplo 31: CRUD con Mongoose
// Realizar un proyecto en Node.js que se conecte a una base de datos MongoDB Atlas llamada colegio. Utilizar mongoose importándolo en Módulo (import) y gestionar sus acciones a través de promesas.
// ✓ Crear una colección llamada "estudiantes" que incorporará 10 documentos con la siguiente estructura y datos que se detallan a continuación:
//   a) nombre: tipo string
//   b) apellido: tipo string
//   c) edad: tipo number
//   d) dni: tipo string (campo único)
//   e) curso: tipo string
//   f) nota: tipo number
//   Tod0s los campos deben ser requeridos obligatoriamente ({ required: true })
// ✓ Insertar un arreglo de estudiantes a dicha colección
// ✓ Desarrollar los endpoints correspondientes al CRUD pensado para trabajar con esta colección
// ✓ Corroborar los resultados con Postman.

Ejemplo 40: Cookies, Session & Storage, inicio de sesion y JSW
Utilización de cookies: set, get, clear y firmar una cookie. (Con cookieParser)
✓ Setear una cookie
✓ Obtener una cookie
✓ Eliminar una cookie
✓ Firma de una cookie

Inyectar cookies en frontend: Crear una única vista de frontend en nuestro servidor express, la cual contará con dos campos input y dos botones 
✓ El primer campo input deberá ser el nombre del cliente. 
✓ El segundo campo input deberá contener el correo electrónico 
✓ El botón getCookie debe enviar una petición de tipo GET para recibir la cookie, solo mostrar por consola la cookie. 
✓ El botón submit, deberá enviar una petición POST, la cual deberá crear una cookie con el formato {user:correoDelInput} 
✓ La cookie debe tener un tiempo de vida de 10 segundos. Corroborar que la cookie se borre después del tiempo indicado. 

Sesiones de usuario en el server: Realizar un programa de backend que establezca sesiones de usuarios en el servidor.
✓ Cuando un cliente visita el sitio por primera vez en la ruta 'root', se presentará el mensaje de “Te damos la bienvenida”.
✓ Con los siguientes request de ese mismo usuario, deberá aparecer el número de visitas efectuadas. El cliente podrá ingresar por query params el nombre, en cuyo caso se añadirá a los mensajes devuelto.
✓ Por ejemplo: “Bienvenido Juan” o “Juan visitaste la página 3 veces”. Ese nombre, solo se almacenará la primera vez que el cliente visite el sitio. 

Ejemplo 41: Login por formulario, autenticacion-autorizacion 
Primer login por formulario
✓ Se deberá contar con una estructura de router para sessions en /api/sessions/ el cual contará con métodos para registrar a un usuario y para su respectivo login
✓ Se deberá contar además con un router de vistas en la ruta base / para llevar al formulario de login, de registro y de perfil.
✓ El formulario de registro insertará en la base de datos el usuario. El cual deberá contar con: first_name, last_name, email, age, password
✓ Se debe contar con el formulario de login el cual corroborará que el usuario exista en la base, y además genere un objeto user en req.session, indicando que puede utilizar la página.
✓ Agregar validaciones a las rutas de vistas para que, si aún no estoy logueado, no pueda entrar a ver mi perfil, y si ya estoy logueado, no pueda volver a loguearme o registrarme.
✓ En la vista de perfil, se deben arrojar los datos no sensibles del usuario que se haya logueado.

Reajustando autorización (Continuacion del Primer login por formulario)
✓ Cambiar la validación de rutas por middlewares de rutas públicas o privadas.
    ○ Las rutas públicas deben regresar siempre a la pantalla de login en caso de que no se reconozca una session activa.
    ○ Las rutas privadas deben regresar siempre a la pantalla de profile en caso de que haya una sesión activa en session.
✓ Realizar un botón “logout” en la vista de perfil, que permita destruir la sesión y redireccionar a la vista de login

Restauración de contraseña (Autorizacion y Autenticacion)
✓ Un link desde la vista de login que diga “Restaurar contraseña”, el cual llevará a una nueva vista.
✓ Esta nueva vista de restauración solicitará dos campos: el correo electrónico y la nueva contraseña a cambiar.
✓ NO REQUERIREMOS VERIFICACIÓN DE CORREO, esto lo haremos más adelante, solo indicaremos el correo y se deberá sustituir el password.
✓ El nuevo password deberá estar Hasheado también.
✓ Reintentar el login y corroborar que el usuario se pueda loguear correctamente.

Ejemplo 42: Uso de passport y jwt (con sessions)
Inicio de sesión con jwt --> A partir del servidor de express que estamos construyendo:
✓ Configurar la creación del token para que ésta solo tenga duración de 1 minuto.
✓ Crear tres vistas, vista base, vista de registro y vista de login. (puedes hacerlo sin motor de plantillas).
✓ Al cargar la página principal (‘/’), si existe una sesión iniciada, se mostrarán los datos del usuario en cuestión (obtenidos mediante una consulta con el token debidamente adjunto en el encabezado de la petición de datos). Caso contrario, se deberá cargar automáticamente la pantalla de login.
✓ Corroborar el envío del token al front para su futuro almacenamiento

// Colocar una vista en public (No utilizar motores de plantillas), dicha vista contará con dos campos: correo y contraseña, deberá además mandar a llamar un servicio de login que devuelva el token por medio de una cookie como lo visto en el ejemplo
// ✓ No colocar el httpOnly. Intenta el proceso de login y setea la cookie en el navegador. Después, hacer un console.log simple en el archivo js con el comando document.cookie, corroborar que se muestre en la consola del navegador la cookie asociada a tu token. ¡Peligroso!
// ✓ Limpiar esta cookie y colocar el httpOnly en la configuración, repite el proceso del primer punto y corrobora si la cookie aparece en la consola.

// Crear un router para manejo de mascotas en una ruta base ‘/api/pets’, éste gestionará diferentes mascotas en un arreglo como persistencia. Posteriormente, desarrollar los siguientes endpoints:
// ✓ POST (‘/’): deberá insertar una nueva mascota. El formato de cada mascota será {name:String, specie: String}
// ✓ GET(‘/:pet’): Deberá traer la mascota con el nombre indicado. Utilizar una expresión regular para que sólo se puedan recibir letras e incluso espacios (recuerda cómo se lee un espacio a nivel URL). No debe permitir números.
// ✓ PUT (‘/:pet’): Deberá traer la mascota y añadirle un campo “adopted:true” a dicha mascota en caso de existir.
// ✓ Generar además un router.param que permita acceder de manera directa a la mascota, colocándola en req.pet

//Se creará un middleware que, en cada momento, valide el acceso a partir de las políticas (Sólo PUBLIC, USER, ADMIN).
// ✓ Definir una función handlePolicies,
// ✓ El método deberá recibir un arreglo de políticas (strings) y seguir los siguientes pasos:
//     ○ Si la única política es “PUBLIC”, continuar sin problema.
//     ○ para el resto de casos, primero procesar el token de jwt, el cual llegará desde los headers de autorización.
//     ○ Posteriormente, validar el rol del usuario que esté dentro del token para corroborar si se encuentra dentro de las políticas
// ✓ Cada método get, post, put, delete deberá recibir antes de los callbacks, un arreglo de políticas.
// ✓ Colocar handlePolicies como el primer middleware del procesamiento.
// ✓ Crear un router session que cuente con un endpoint ‘/login’, el cual guardará al usuario en un token (no es necesario un registro, todo es hardcodeado para agilizar el proceso de políticas)
// ✓ En el router de usuario que ya existe, crear un endpoint que utilice las políticas de usuario, y otro que utilice sólo políticas públicas.
// ✓ Validar políticas con Postman.
// CONSIDERACIONES:
// 1. Recordar agregar app.use(express.json()); para el login
// 2. Recordar agregar a los headers de autorización el Bearer token en Postman.
// 3. Enviar el jwt por medio de body para este caso
// 4. Hardcodear el rol del cliente en “user”.

Utilizando argumentos con dotenv
✓ Realizar un servidor basado en node js con express, El cual reciba por flag de cli el comando --mode <modo> y sea procesado por commander.
✓ Acorde con este argumento, hacer una lectura a los diferentes entornos, y ejecutar dotenv en el path correspondiente a cada modo (--mode development debería conectar con .env.development).
✓ Para el entorno development, el servidor debe escuchar en el puerto 8080, para el entorno productivo, el servidor debe escuchar en el puerto 3000. 

Ejemplo en vivo
✓ Se creará una función llamada “listNumbers” el cual recibirá un número indefinido de argumentos (...numbers)
✓ Si se pasa un argumento no numérico, entonces deberá mostrar por consola un error indicando “Invalid parameters” seguido de una lista con los tipos de dato (para [1,2,”a”,true], el error mostrará [number,number,string,boolean]
✓ Escapar del proceso con un código -4. Utilizando un listener, obtener el código de escape del error y mostrar un mensaje “Proceso finalizado por argumentación inválida en una función”

Cálculo bloqueante con contador
✓ Realizar un servidor en express que contenga una ruta raíz '/' donde se represente la cantidad de visitas totales a este endpoint
✓ Se implementará otra ruta '/calculo-bloq', que permita realizar una suma incremental de los números del 0 al 100000 con el siguiente algoritmo.
✓ Comprobar que al alcanzar esta ruta en una pestaña del navegador, el proceso queda en espera del resultado. Constatar que durante dicha espera, la ruta de visitas no responde hasta terminar este proceso.
✓ Luego crear la ruta '/calculo-nobloq' que hará dicho cálculo forkeando el algoritmo en un child_process, comprobando ahora que el request a esta ruta no bloquee la ruta de visitas.

Aplicar bajo el modelo de trabajo de TDD:
Una función de login (con usuarios hardcodeados user = coderUser , password = 123)
✓ Si se pasa un password vacío, la función debe consologuear (“No se ha proporcionado un password”)
✓ Si se pasa un usuario vacío, la función debe consologuear (“No se ha proporcionado un usuario”)
✓ Si se pasa un password incorrecto, consologuear (“Contraseña incorrecta”)
✓ Si se pasa un usuario incorrecto, consologuear (“Credenciales incorrectas”)
✓ Si el usuario y contraseña coinciden, consologuear (“logueado”) 

Manejador personalizado de errores
Con base en el ejemplo de errores planteado.
✓ Crear un endpoint en el router de usuarios router.get(‘/:uid’) para recibir a un usuario. NO centrarse en la lógica para devolver al usuario, sino en el error en caso de que no envíen un parámetro numérico válido.
✓ Complementar el código para que se pueda arrojar un error de tipo “INVALID_PARAM”, en caso de que se quiera buscar a un usuario por un :uid inválido (por ejemplo, un valor no numérico, numérico negativo o undefined).
✓ Gestionar el tipo de error en el Enum, en el middleware y en la info

Logger multientorno
Con base en lo aprendido de los loggers
✓ Configurar el primer logger (devLogger) para que cuente con un transporte Console a nivel Verbose.
✓ Crear además un logger (prodLogger) para que cuente con un transporte Console a nivel http y un transporte File a nivel warn
✓ Configurar el middleware que setea el logger en el objeto req, para que coloque el devLogger, o el prodLogger según sea el entorno.
✓ Corroborar los logs en múltiples entornos y analizar el comportamiento.

Proceso de adopción desde Swagger
¿Cómo lo hacemos? Se crearán los endpoints correspondientes en la documentación para llevar a cabo un proceso de adopción
✓ Definir la documentación para mascotas, sólo es necesario definir el método get y el post para crear y ver las mascotas.
✓ Definir la documentación para procesar el método “register” que se encargará de crear un usuario. No es necesario implementar el login, sólo el registro.
✓ Definir la documentación de adopción, la cual deberá recibir doble parámetro para poder llevar a cabo el proceso de adopción.
✓ Corroborar en la base de datos que las entidades se estén creando correctamente.

*/