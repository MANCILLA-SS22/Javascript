'use client';

import React, { useRef, useState } from 'react';
import classes from "./image-picker.module.css";
import Image from 'next/image';

function ImagePicker({label, name}){
    const [pickedImage, setPickedImage] = useState();
    const imageInputRef = useRef();

    function handlePickClick(){
        imageInputRef.current.click(); //Once we click on the button, then the "Choose one" input button will be triggered. We do so because we made the input tag invisible but we still need to click on that button (input) even when we can't see it anymore.
    }

    function handleImageChange(event){
        const file = event.target.files[0];
        if(!file){
            setPickedImage(null);
            return;
        }

        const fileReader = new FileReader();
        fileReader.readAsDataURL(file); 
        fileReader.onload = () => setPickedImage(fileReader.result); //We store a function as a value in "onload", and this function will then be triggered by the "fileReader" once "readAsDataURL" is done. So, first the "fileReader.readAsDataURL" is executed and the the following one.
    }

    return (
        <>
            <div className={classes.picker}>
                <label htmlFor={name}>{label}</label> {/* We'll add the htmlFor prop to connect this label to some input. */}
                <div className={classes.controls}>
                    <div className={classes.preview}>
                        {!pickedImage && <p>No image picked yet.</p>}
                        {pickedImage && <Image src={pickedImage} alt="The image selected by the user" fill/>}
                    </div>
                    <input className={classes.input} type="file" id={name} accept="image/png, image/jpeg" name={name} ref={imageInputRef} onChange={handleImageChange} required />
                    <button className={classes.button} type='button' onClick={handlePickClick}>Pick an Image</button>
                </div>
            </div>
        </>
    )
}

export default ImagePicker;

//new FileReader();
//When some file has been selected we follow the next steps.
//Now, in order to show it as a preview here, we now want to convert it into a so-called data URL, which is simply a value that can be used as an input for an image element, so that can be
//used as a source for an image element.

//fileReader.readAsDataURL();
//This method doesn't actually return anything, not a promise, not the read file, and it also doesn't take a callback. Instead, we get hold of that data URL that's being generated by assigning a 
//value to the on load property of this file reader object.