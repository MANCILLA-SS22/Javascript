                                                                                                                   GitHub
  
  - GIT: Sistema de control de versiones gratuito y de código abierto, diseñado para manejar desde pequeños a grandes proyectos de manera rápida y eficaz. Se entiende como control de versiones a 
    todas las herramientas que nos permiten hacer modificaciones en nuestro proyecto. Este sistema registra los cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo.
    Con GIT, podemos ir a versiones anteriores, muy útil para errores, y para la organización.
    Con GIT, podemos ir a versiones anteriores, muy útil para errores, y para la organización.
    
    > Los 3 estados de GIT
      1. estado (el que trabajamos) “preparamos las cajas”. 
      2. estado (archivos listos) “agregamos las cajas listas”. 
      3. estado (registro de todos los archivos) “lote listo”.
      
    > Configurando GIT por primera vez
      ~ Tu identidad: Lo primero que deberías hacer cuando instalas Git es establecer tu nombre de usuario y dirección de correo electrónico. Esto es importante porque las confirmaciones de
         cambios (commits) en Git usan esta información, y es introducida de manera inmutable en los commits que envías.               john@MyShopSolutions: ~$ git --version                    
      ~ Elige un nombre de usuario que recuerdes fácil, y el email que en la próxima clase usarás en Github    
      ~ Establece el nombre con el comando: git config --global user.name "Nombre Apellido".       
      ~ Establece el correo a usar con el comando. git config --global user.email johndoe@example.com
            
    > Comprobando tu configuración  
      ~ Vamos a comprobar si guardamos bien el usuario usando el comando: git config --list
      ~ Puedes también comprobar qué valor tiene la clave nombre en Git ejecutando: git config user.name
             
    > Comandos básicos
       ✓ /?: si quieres saber más de un comando, añade /? para ver la ayuda relacionada. Te será muy útil para ver las muchas opciones de cada comando.
       ✓ HELP: te mostrará una lista de comandos disponibles.
       ✓ DIR: es el comando más conocido de DOS y sirve para ver elcontenido de una carpeta (en MAC-OS usar LS).
       ✓ CD: sirve para entrar en una carpeta o salir de ella (CD…).
       ✓ CLEAR: limpia la consola.     
       ✓ MKDIR: con este comando crearás una carpeta nueva. Con RMDIR podrás eliminarla.
       ✓ MOVE y COPY: son los comandos para mover y copiar archivos respectivamente. Deberás indicar el nombre del archivo con su ruta (si está en otra carpeta en la que te encuentras) y la
           ruta de destino.
       ✓ RENAME: sirve para renombrar un archivo o carpeta. Hay que indicar el nombre original y el definitivo.
       ✓ DEL: es el comando para eliminar un archivo. Recuerda que no irá a la Papelera, así que piensa muy bien antes de borrar algo. Y para eliminar carpeta usa el comando RD (en MAC-OS usar
           RM para archivos / para eliminar carpetas RM -RF).
       ✓ EXIT: cierra la ventana de la línea de comandos o símbolo del sistema.
       ✓ COPY CON: crear archivos (en MAC-OS usar TOUCH).
          
    > Comandos
      ✓ git help config    /   git config --help     /     git-config   obtener ayuda
      ✓ git init: indicarle que en ese directorio, donde ejecutamos este comando, será usado con GIT. 
      ✓ git add .: agregar todos los archivos creados, modificados, eliminados al estado 2 (stage)
      ✓ git commit -m “Mensaje”: mensaje obligatorio para indicar que hemos cambiado por ejemplo, al estado 3.
      ✓ Git log --online: para conocer loscódigos de los commits realizados.
      ✓ Git checkout rama: para cambiar de rama o ir a un commit específico (debemos conocer su código anteriormente)
      ✓ git merge rama: debemos estar en MASTER para fusionar.
      ✓ git branch rama: creación de una rama (si queremos eliminar una rama ponemos git branch -D nombre-rama)
      ✓ git branch -D rama: borrar ramas
      ✓ git remote -v: Ver url del repositorio
      ✓ git reflog: Ver historial
      
      ✓ git init initializes your local directory as a new git repository. You must run this before you can commit any of your work.
      ✓ git status shows the current status of your repo. It will show you if you have any work that is unstaged, what branch you are on, how many commits you are ahead of the master remote on github, and other useful things.
      ✓ git diff shows you the changes in your unstaged code.
      ✓ git remote -v shows you all the remotes for your repo. The v stands for verbose, which shows you the URL of the repository on github, if any, that your local repository is pointing to rather than just the name of the remote repo.
      ✓ git add . takes all unstaged work and stages it, making it ready to be committed. You can also specify a particular file to stage with git add file-path/name-of-file
      ✓ git commit -m "write commit message here" commits all staged work. It’s important to write a brief, clear commit message so you know what each commit is for. “Final commit” is not the commit message you’re looking for exactly 100% of 
           the time.
      ✓ git pull once you've committed all your local work and running git status shows that you have nothing to commit, you pull down any changes from your remote. By default, this will pull from the origin remote’s master branch. To be 
           specific about which remote and branch to pull from, you can use: git pull name-of-remote name-of-branch
      ✓ git push pushes your local changes up to your remote. By default, this will push to the origin remote’s master branch. Like pull, you can push to a specific remote and branch with: git push name-of-remote name-of-branch. This is 
           useful if you are using branches and pull requests. If you get an error message, it’s probably because you haven’t pushed your local branch up to github yet. Try git push -u name-of-remote name-of-branch.
      ✓ git branch shows you all your local branches and indicates which branch you are currently on.
      ✓ git checkout -b name-of-new-branch makes a new branch and switches to that branch.
      ✓ git merge name-of-branch will merge the specified branch into the branch you are currently on.
      ✓ git branch -d name-of-branch-to-delete deletes the specified branch
      ✓ git log will show you the full list of commits and authors for your repo
      ✓ history will show you your past git commands
      ✓ git stash stashes any unstaged changes in your repository. They will not be present in your codebase, but they are not deleted.
      ✓ git stash pop gives you back the last staged changes you stashed
      ✓ git blame file-path/name-of-file shows you line-by-line who wrote the code in the specified file. Useful when you have a question about how something works and want to figure out who to ask, and also great source of shame when you 
          realize you wrote the chunk of code you’ve been swearing at for the last hour.
            
      + Configurar global main como nombre de rama principal:
        git config --global init.defaultBranch main

      + error: remote origin already exists:
        git remote set-url origin [url]
 
      + Ver url del repositorio:
        git remote -v

      + Eliminar commit especifico:
        git revert [commit]
        (cerrar ventana del editor)(se crea nuevo commit)

      + Clonar repositorio:
        git clone [url]

      + Ver historial:
        git reflog
 
      + Deshace todos los commits después de [commit], preservando los cambios localmente:
        git reset [commit]
 
      + Desecha todo el historial y regresa al commit especificado:
        git reset --hard [commit]
        
        
     > Para iniciar sesion cuando se requiera, debemos:
       1. Credenciales de Windows 
       
       2. Cambiar el username y email de Git
          git config --global user.name "new name"
          git config --global user.email newcorreo@example.com 
       
       3. Cambiar el usuario de Credenciales
          git config credential.username "new name"
          
       4. En caso de que la terminal diga que no reconozca, debemos escribir lo siguiente para que podamos iniciar sesion desde el navegador y que aparezca la ventanilla
          git push --set-upstream origin main        
       
       5. Para validar la configuración actual
          git config --global -e    
          
     > Si quiero agregar cambios a Github desde VS code, necesito:
       1. git add .
       2. git commit -m "escribir cualquier nombre al cambio"
       3. git push      o tambien     git push -u origin main
       
       
       
       
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$        

                                                                                                                   WEB API'S

> IntersectionObserver: The IntersectionObserver interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's 
  viewport. The ancestor element or viewport is referred to as the root.
  When an IntersectionObserver is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the IntersectionObserver is created, so a given observer object is only useful for 
  watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer.            
  
  ~ constructor: The IntersectionObserver() constructor creates and returns a new IntersectionObserver object.
    The rootMargin, if specified, is checked to ensure it's syntactically correct. If not specified, or an empty string, the default is 0px 0px 0px 0px.
    The thresholds, if specified, are checked to ensure that they're all in the range 0.0 and 1.0 inclusive, and the threshold list is sorted in ascending numeric order. If the threshold list is empty, it's set to the array [0.0].      
  
                                                                                   new IntersectionObserver(callback, options);
  
    callback: A function which is called when the percentage of the target element is visible crosses a threshold. The callback receives as input two parameters:
    
    entries: An array of IntersectionObserverEntry objects, each representing one threshold which was crossed, either becoming more or less visible than the percentage specified by that threshold.
    
    observer: The IntersectionObserver for which the callback is being invoked.
    
    options Optional: An optional object which customizes the observer. If options isn't specified, the observer uses the document's viewport as the root, with no margin, and a 0% threshold (meaning that even a one-pixel change is enough to
    trigger a callback). You can provide any combination of the following options:
    
    root: An Element or Document object which is an ancestor of the intended target, whose bounding rectangle will be considered the viewport. Any part of the target not visible in the visible area of the root is not considered visible.
    root property identifies the Element or Document whose bounds are treated as the bounding box of the viewport for the element which is the observer's target. 
    If the root is null, then the bounds of the actual document viewport are used, the owning document is used as the root, and the bounds its viewport (that is, the visible area of the document) are used as the root bounds.
    
    rootMargin: A string which specifies a set of offsets to add to the root's bounding_box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The syntax is approximately the same as that for 
    the CSS margin property; see The intersection root and root margin for more information on how the margin works and the syntax. The default is "0px 0px 0px 0px".
    
    threshold: Either a single number or an array of numbers between 0.0 and 1.0, specifying a ratio of intersection area to total bounding box area for the observed target. A value of 0 means that even a single visible pixel counts as the 
    target being visible. 1.0 means that the entire target element is visible. See Thresholds for a more in-depth description of how thresholds are used. The default is a threshold of 0.0.                                                                                                                                                                                 
    
    
    disconnect(): stops watching all of its target elements for visibility changes.
    
    observe(): adds an element to the set of target elements being watched by the IntersectionObserver. One observer has one set of thresholds and one root, but can watch multiple target elements for visibility changes in keeping with those.
    To stop observing the element, call IntersectionObserver.unobserve().
    
    takeRecords(): returns an array of IntersectionObserverEntry objects, one for each targeted element which has experienced an intersection change since the last time the intersections were checked, either explicitly through a call to this 
    method or implicitly by an automatic call to the observer's callback.
    
    unobserve(): instructs the IntersectionObserver to stop observing the specified target element.
    
- FormData(): The FormData interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the fetch(), XMLHttpRequest.send() or navigator.sendBeacon() methods. It uses the 
  same format a form would use if the encoding type were set to "multipart/form-data"         
