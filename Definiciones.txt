$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$                                                                                                       


                                                                                                       Conceptos de informatica, computacion y programacion  ñ

- Declarative code: 

- DOM: 

- Virtual DOM:
                                                                                                       
- URL: 
  > https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL
  > https://www.hostinger.com/tutorials/what-is-a-url
  > https://blog.hubspot.com/marketing/parts-url

- URI: 
  > https://www.hypr.com/security-encyclopedia/uniform-resource-identifier-uri#:~:text=Uniform%20Resource%20Identifier%20(URI),-A%20Uniform%20Resource&text=URIs%20enable%20the%20protocols%20over,connected%20devices%20and%20other%20resources.
  > https://www.geeksforgeeks.org/uri-full-form/
  > https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
  
- URN: 
  > https://en.wikipedia.org/wiki/Uniform_Resource_Name#:~:text=A%20Uniform%20Resource%20Name%20(URN,to%20exist%20or%20becomes%20unavailable.
  > https://www.geeksforgeeks.org/uniform-resource-name-urn-in-transport-layer/

- Protocolo: 
  > https://www.techopedia.com/definition/4528/protocol
  > https://www.cloudflare.com/learning/network-layer/what-is-a-protocol/
  > https://www.imagar.com/blog-desarrollo-web/que-es-el-protocolo-en-informatica/
      
- Servidor: 
  > https://www.paessler.com/it-explained/server
  > https://www.geeksforgeeks.org/what-is-server/
  > https://en.wikipedia.org/wiki/Server_(computing)
  > https://www.zenarmor.com/docs/network-basics/types-of-servers
  > https://www.ionos.es/digitalguide/servidores/know-how/que-es-un-servidor-un-concepto-dos-definiciones/
  
- Microservices:
  > https://aws.amazon.com/microservices/
  > https://www.geeksforgeeks.org/microservices/
  > https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices
  > https://www.redhat.com/es/topics/microservices
  > https://www.ibm.com/mx-es/topics/microservices
  > https://kinsta.com/es/blog/microservicios-vs-api/

- Compresion: 
  > https://www.barracuda.com/support/glossary/data-compression
  > https://www.britannica.com/technology/data-compression
  > https://www.datamation.com/big-data/data-compression/
  > https://www.cisco.com/c/es_mx/support/docs/wan/data-compression/14156-compress-overview.html

- Database:
  > 
  > 
  > 
    
- storage:
  > https://en.wikipedia.org/wiki/Computer_data_storage 
  > https://www.ibm.com/topics/data-storage
  > https://www.techopedia.com/definition/1115/storage

- localStorage and sessionStorage: 
  > https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage
  > https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
  > https://www.freecodecamp.org/news/web-storage-localstorage-vs-sessionstorage-in-javascript/
  > https://www.loginradius.com/blog/engineering/guest-post/local-storage-vs-session-storage-vs-cookies/
  > https://www.freecodecamp.org/news/how-web-storage-works/
  
- API (Application Programming Interfaces): 
  > https://aws.amazon.com/what-is/api/#:~:text=API%20stands%20for%20Application%20Programming,other%20using%20requests%20and%20responses.
  > https://www.mulesoft.com/resources/api/what-is-an-api
  > https://www.ibm.com/topics/api
  > https://stoplight.io/api-types#web-apis
  > https://www.xataka.com/basics/api-que-sirve
  > https://www.redhat.com/es/topics/api/what-are-application-programming-interfaces#:~:text=Una%20API%20o%20interfaz%20de,el%20software%20de%20las%20aplicaciones.
  
- Webshockets:
  > https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
  > https://www.ionos.com/digitalguide/websites/web-development/what-is-websocket/
  > https://www.pubnub.com/guides/websockets/
  > https://www.ibm.com/docs/es/was/9.0.5?topic=applications-websocket
  > https://www.geeksforgeeks.org/what-is-web-socket-and-how-it-is-different-from-the-http/
  > https://www.linkedin.com/pulse/websocket-handshaking-explained-understanding-key-real-time-saafan/

- Cookies: 
  > https://usa.kaspersky.com/resource-center/definitions/cookies
  > https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
  > https://en.wikipedia.org/wiki/HTTP_cookie#:~:text=Cookies%20are%20arbitrary%20pieces%20of,into%20otherwise%20stateless%20HTTP%20transactions.
  > https://secureprivacy.ai/blog/session-cookies-vs-persistent-cookies#:~:text=Session%20cookies%20are%20temporary%20and%20are%20used%20to%20maintain%20information,accessed%20across%20multiple%20browsing%20sessions.
  > https://allaboutcookies.org/what-is-a-cookie#:~:text=4.-,Third-party%20cookies,%2C%20videos%2C%20or%20web%20banners.
  > https://www.geeksforgeeks.org/difference-between-local-storage-session-storage-and-cookies/
  > https://www.cookiescan.com/what-are-website-cookies-and-where-are-they-stored/#:~:text=one%20is%20removed.-,What%20Are%20Cookies%20Used%20For%3F,part%20of%20the%20internet%20experience.
  > https://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs
  
- Authentication and authorization: 
  > https://www.onelogin.com/learn/authentication-vs-authorization#:~:text=Authentication%20and%20authorization%20are%20two,authorization%20determines%20their%20access%20rights.
  > https://auth0.com/docs/get-started/identity-fundamentals/authentication-and-authorization
  > https://www.geeksforgeeks.org/difference-between-authentication-and-authorization/
  > https://www.onelogin.com/learn/authentication-vs-authorization#:~:text=Authentication%20and%20authorization%20are%20two,authorization%20determines%20their%20access%20rights.

- Peticiones y metodos HTTP (Hypertext Transfer Protocol): 
  > https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
  > https://www.codecademy.com/article/http-requests
  > https://www.cloudflare.com/learning/ddos/glossary/hypertext-transfer-protocol-http/
  > https://www.geeksforgeeks.org/different-kinds-of-http-requests/
  > https://kinsta.com/es/base-de-conocimiento/que-es-una-peticion-http/
  
- HTTPS:
  > https://www.cloudflare.com/learning/ssl/what-is-https/
  > https://www.ssl.com/faqs/what-is-https/

- TSL
  > https://www.internetsociety.org/deploy360/tls/basics/
  > https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/

- SSL:
  > https://www.cloudflare.com/learning/ssl/what-is-ssl/
  > https://www.kaspersky.com/resource-center/definitions/what-is-a-ssl-certificate
  
- DNS: 
  > https://www.cloudflare.com/learning/dns/what-is-dns/
  > https://aws.amazon.com/route53/what-is-dns/
  
- CDN:
  > https://aws.amazon.com/what-is/cdn/
  > https://www.cloudflare.com/learning/cdn/what-is-a-cdn/

- JSON (JavaScript Object Notation): 
  > https://www.json.org/json-en.html
  > https://www.oracle.com/database/what-is-json/
  > https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON
  > https://www.hostinger.es/tutoriales/que-es-json
  > https://aws.amazon.com/es/compare/the-difference-between-json-xml/
         
- API protocols: 
  > https://stoplight.io/api-types 
  > https://apidog.com/blog/8-api-protocol-types/
  > https://immune.institute/blog/que-es-la-api/

- Api rest: 
  > https://radixweb.com/blog/rest-vs-restful-api
  > https://aws.amazon.com/what-is/restful-api/
  > https://www.ibm.com/topics/rest-apis
  > https://www.scrapingbee.com/blog/six-characteristics-of-rest-api/
  > https://www.redhat.com/en/topics/api/what-is-a-rest-api
  > https://blog.hubspot.es/website/que-es-api-rest   
  
- BODY, HEADERS & PARAMS
  > https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
  > https://developer.mozilla.org/en-US/docs/Web/API/Request/body
  > https://guides.emberjs.com/release/routing/query-params/
  > https://www.branch.io/glossary/query-parameters/#:~:text=Query%20parameters%20are%20a%20defined,on%20the%20data%20being%20passed.
  > https://www.botify.com/learn/basics/what-are-url-parameters#:~:text=URL%20parameters%20(also%20known%20as,by%20the%20%27%26%27%20symbol.

- RPC (Remote Procedure Calls): 
  > https://www.ibm.com/docs/en/aix/7.3?topic=concepts-remote-procedure-call
  > https://www.geeksforgeeks.org/remote-procedure-call-rpc-in-operating-system/
  > https://www.lenovo.com/us/en/glossary/what-is-rpc/?orgRef=https%253A%252F%252Fwww.google.com%252F
   
- Query: 
  > https://www.techopedia.com/definition/5736/query
  > https://www.macrometa.com/articles/what-are-queries
  > https://aulacm.com/que-es/query-significado-definicion/

- Asincrónia: 
  > https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing
  > https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/
  > https://www.freecodecamp.org/news/asynchronous-programming-in-javascript/
  > https://lenguajejs.com/javascript/asincronia/que-es/
  > https://www.freecodecamp.org/espanol/news/sincrono-vs-asincrono-en-javascript/ 
    
- AJAX (Asynchronous JavaScript and XML): 
  > https://aws.amazon.com/what-is/ajax/
  > https://developer.mozilla.org/en-US/docs/Glossary/AJAX
  > https://www.freecodecamp.org/news/ajax-tutorial/
  > https://www.hostinger.es/tutoriales/que-es-ajax#:~:text=AJAX%20significa%20JavaScript%20asíncrono%20y,al%20servidor%20en%20segundo%20plano.
  > https://www.ibm.com/docs/es/rational-soft-arch/9.6.1?topic=page-asynchronous-javascript-xml-ajax-overview
  > https://ebac.mx/blog/que-es-ajax
 
- Promesas (promise): 
  > https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
  > https://www.freecodecamp.org/news/guide-to-javascript-promises/
  > https://www.geeksforgeeks.org/javascript-promise/
  > https://lenguajejs.com/javascript/asincronia/promesas/
  > https://es.javascript.info/promise-basics
  
- XML (Extensible Markup Language): 
  > https://aws.amazon.com/what-is/xml/#:~:text=Extensible%20Markup%20Language%20(XML)%20lets,%2C%20and%20third-party%20applications.
  > https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction
  > https://rockcontent.com/es/blog/que-es-xml/
   
- HTTP response status codes: 
  > https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
  > https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
  
- JSON Web Token (JWT): 
  > https://jwt.io/introduction
  > https://auth0.com/docs/secure/tokens/json-web-tokens
  > https://stackoverflow.com/questions/31309759/what-is-secret-key-for-jwt-based-authentication-and-how-to-generate-it  

- Client-side rendering (CSR) and Server-side Rendering (SSR): 
  > https://www.geeksforgeeks.org/server-side-rendering-vs-client-side-rendering-vs-server-side-generation/
  > https://www.bairesdev.com/blog/server-side-rendering-react/
  > https://www.searchenginejournal.com/client-side-vs-server-side/482574/
  
- Static site generator (SSG): 

- Single-Page Application (SPA): 

- Search Engine Optimization (SEO): 

- Hoisting:
  > https://www.hostinger.com/tutorials/what-is-web-hosting/
  > https://www.techopedia.com/definition/29023/web-hosting
  > https://www.ibm.com/topics/web-hosting
  > https://www.webempresa.com/hosting/hosting-que-es-como-funciona.html
                                                                                                       
- Kernel: 
  > https://en.wikipedia.org/wiki/Kernel_(operating_system)
  > https://www.baeldung.com/cs/os-kernel
  > https://www.geeksforgeeks.org/kernel-in-operating-system/
  > https://www.geeknetic.es/Kernel/que-es-y-para-que-sirve
  > https://salesystems.es/que-es-un-kernel/#:~:text=El%20kernel%20es%20el%20componente,o%20núcleo%20del%20sistema%20operativo.
  
- Maquina virtual: 
  > https://cloud.google.com/learn/what-is-a-virtual-machine
  > https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-a-virtual-machine
  > https://www.oracle.com/ie/cloud/compute/virtual-machines/what-is-virtual-machine/
  > https://www.ibm.com/topics/virtual-machines
  > https://www.vmware.com/topics/glossary/content/virtual-machine.html
  > https://www.redhat.com/es/topics/virtualization/what-is-a-virtual-machine  

- VPN: 
  > https://aws.amazon.com/what-is/vpn/
  > https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-vpn
  > https://www.kaspersky.com/resource-center/definitions/what-is-a-vpn
  > https://www.freecodecamp.org/news/how-does-a-vpn-work/
  > https://www.xataka.com/basics/que-es-una-conexion-vpn-para-que-sirve-y-que-ventajas-tiene
                                                                                                      
- Proxy: 
  > https://www.varonis.com/blog/what-is-a-proxy-server
  > https://www.fortinet.com/resources/cyberglossary/proxy-server
  > https://cybernews.com/resources/what-is-a-proxy-server/
  > https://www.xataka.com/basics/que-es-un-proxy-y-como-puedes-utilizarlo-para-navegar-de-forma-mas-anonima
  > https://www.mcafee.com/blogs/es-es/privacy-identity-protection/que-es-un-proxy//
  > https://kinsta.com/es/base-de-conocimiento/que-es-un-proxy/
        
- Router: 
  > https://us.norton.com/blog/iot/smarter-home-what-is-router
  > https://www.cisco.com/c/en/us/solutions/small-business/resource-center/networking/how-does-a-router-work.html
  > https://www.cloudflare.com/es-es/learning/network-layer/what-is-a-router/
    
- firewall: 
  > https://www.cisco.com/c/en/us/products/security/firewalls/what-is-a-firewall.html
  > https://www.forcepoint.com/cyber-edu/firewall
  > https://latam.kaspersky.com/resource-center/definitions/firewall

- cache: 
  > https://aws.amazon.com/caching/
  > https://wpengine.com/resources/what-is-cached-data/
  > https://learn.g2.com/what-is-cached-data
  > https://www.fortinet.com/resources/cyberglossary/what-is-caching
  > https://kinsta.com/blog/what-is-cached-data/
  
- Drivers: 
  > https://learn.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/what-is-a-driver-
  > https://www.bobology.com/public/What-is-a-Software-Driver.cfm
  > https://www.hp.com/us-en/shop/tech-takes/what-are-computer-drivers#:~:text=A%20driver%2C%20or%20device%20driver,external%20peripherals%2C%20like%20a%20printer.
  > https://learn.microsoft.com/es-es/windows-hardware/drivers/gettingstarted/what-is-a-driver-
  
- Cumulative Layout Shift (CLS): 
  > https://nextjs.org/learn-pages-router/seo/web-performance/cls
  > https://www.semrush.com/blog/cumulative-layout-shift/  
  
- Ancho de banda: 
  > https://www.solarwinds.com/resources/it-glossary/network-bandwidth
  > https://www.techtarget.com/searchnetworking/definition/bandwidth
  > https://www.geeksforgeeks.org/introduction-to-bandwidth/
  > https://www.verizon.com/articles/internet-essentials/bandwidth-definition/

- Data Rate (velocidad de internet): 
  > https://resources.pcb.cadence.com/blog/2022-data-rates-in-wireless-communication-channels
  > https://www.geeksforgeeks.org/difference-between-bandwidth-and-data-rate/
  
- Throughput (Rendimiento): 
  > https://nilesecure.com/network-management/what-is-network-throughput-how-to-measure-and-improve-it
  > https://www.zenarmor.com/docs/network-basics/what-is-network-throughput#what-is-throughput-in-networking-1
  > https://aws.amazon.com/compare/the-difference-between-throughput-and-latency/#:~:text=Throughput%20measures%20the%20volume%20of,latency%20causes%20a%20network%20delay.
  > https://www.dnsstuff.com/network-throughput-bandwidth
  
- Latency (Latencia):   
  > https://aws.amazon.com/what-is/latency/#:~:text=Network%20latency%20is%20the%20delay,response%20times%20have%20low%20latency.
  > https://www.cloudflare.com/learning/performance/glossary/what-is-latency/
  > https://www.ibm.com/topics/latency
  > https://www.geeksforgeeks.org/what-is-latency/

- Frequency:
  > https://www.geeksforgeeks.org/what-is-frequency/
  > https://circuitglobe.com/difference-between-frequency-and-bandwidth.html
  
- Hertz:
  > https://60sec.site/terms/what-is-hz-in-computing-hertz

- Refresh rate (Frecuencia de refresco):
  > www.intel.com/content/www/us/en/gaming/resources/highest-refresh-rate-gaming.html#:~:text=The%20refresh%20rate%20of%20your,image%20144%20times%20per%20second.
  > https://www.hp.com/au-en/shop/tech-takes/post/what-is-refresh-rate
  > https://insights.samsung.com/2022/03/07/how-does-refresh-rate-work-for-monitors/

- Cache:
  > https://aws.amazon.com/caching/
  > https://www.spiceworks.com/tech/tech-101/articles/what-is-cache/
  > https://en.wikipedia.org/wiki/Cache_(computing)
  > https://www.britannica.com/technology/cache-memory
  > https://www.geeksforgeeks.org/cache-memory-in-computer-organization/
  > https://sematext.com/glossary/cache/#:~:text=Definition%3A%20What%20Is%20a%20Cache,browsers%20to%20speed%20load%20times.

- Buffer: 
  > https://stackoverflow.com/questions/648309/what-does-it-mean-by-buffer
  > https://en.wikipedia.org/wiki/Data_buffer
  > https://www.geeksforgeeks.org/buffering-in-computer-network/
  > https://www.baeldung.com/cs/buffer
  > https://techterms.com/definition/buffer
  > https://www.quora.com/What-does-the-word-buffer-refer-to-in-programming#:~:text=·%207y,and%20used%20by%20the%20application.

- Core: 
  > https://www.supermicro.com/en/glossary/core#:~:text=In%20computing%2C%20a%20%27Core%27,tasks%20like%20rendering%203D%20images.
  > https://www.lenovo.com/us/en/glossary/cpu-core/?orgRef=https%253A%252F%252Fwww.google.com%252F
  > https://www.tomshardware.com/news/cpu-core-definition,37658.html
  > https://www.geekompc.com/what-is-a-core-in-a-cpu/

- Threads: 
  > https://en.wikipedia.org/wiki/Thread_(computing)
  > https://simple.wikipedia.org/wiki/Thread_(computer_science)
  > https://ioflood.com/blog/what-are-cpu-threads-cores-vs-threads-explained/#:~:text=Threads%20are%20sequences%20of%20instructions,performed%20concurrently%20by%20the%20CPU.
  > https://www.geeksforgeeks.org/what-are-threads-in-computer-processor-or-cpu/
  > https://www.liquidweb.com/blog/difference-cpu-cores-thread/
  
- CPU processor:
  > https://support.microsoft.com/en-us/windows/all-about-processors-cpus-06dc72ec-3de2-4eb8-8cc2-7e5f2417b90b
  > https://en.wikipedia.org/wiki/Central_processing_unit
  > https://www.intel.com/content/www/us/en/business/small-business/resources/ram-vs-processor.html
  > https://www.techopedia.com/definition/28254/processor
  > https://www.coursereport.com/blog/what-is-a-processor
  
- GPU processor:  

- RAM: 
  > https://www.intel.com/content/www/us/en/tech-tips-and-tricks/computer-ram.html
  > https://www.spiceworks.com/tech/hardware/articles/what-is-ram/
  > https://www.crucial.com/articles/about-memory/support-what-does-computer-memory-do
  > https://www.ign.com/articles/what-is-ram
  > https://en.wikipedia.org/wiki/Random-access_memory

- ROM: 
  > https://www.lenovo.com/us/en/glossary/what-is-rom/?orgRef=https%253A%252F%252Fwww.google.com%252F
  > https://www.geeksforgeeks.org/read-only-memory-rom/
  > https://en.wikipedia.org/wiki/Read-only_memory
  > https://www.arrow.com/en/research-and-events/articles/what-is-rom-types-of-rom-explained
  > https://www.hp.com/us-en/shop/tech-takes/ram-vs-rom#:~:text=ROM%20(read-only%20memory)%20is%20a%20non-volatile,software%20or%20your%20startup%20programs.
  
- SSD: 
  >   

- Query builder: 

- ORM/ODM: 


- Stateless and stateful:
  > https://www.baeldung.com/cs/stateful-stateless-system
  > https://www.geeksforgeeks.org/difference-between-stateless-and-stateful-protocol/
  > https://www.tutorialspoint.com/difference-between-stateless-and-stateful-protocols

- container (docker):
  > https://www.docker.com/resources/what-container/#:~:text=A%20Docker%20container%20image%20is,tools%2C%20system%20libraries%20and%20settings.
  > https://docs.docker.com/guides/walkthroughs/what-is-a-container/

- dockerfile: 
  > https://www.cloudbees.com/blog/what-is-a-dockerfile
  > https://docs.docker.com/reference/dockerfile/

- Image (docker): 
  > https://www.geeksforgeeks.org/what-is-docker-image/
  > https://docs.docker.com/guides/docker-concepts/the-basics/what-is-an-image/
  
- Imagen base: Escribimos en nuestro código --> FROM node. Esto significa que estaremos tomand una imagen base del entorno de node, para poder configurar nuestra app. 

- Clusterización y Orquestación: 
  > https://aws.amazon.com/what-is/container-orchestration/
  > https://www.vmware.com/topics/glossary/content/container-orchestration.html#:~:text=Container%20orchestration%20is%20the%20automation,networking%2C%20load%20balancing%20and%20more.
  > https://cloud.google.com/discover/what-is-container-orchestration
  > https://stackoverflow.com/questions/52453146/what-is-the-difference-between-clustering-management-and-orchestration-in-docker

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$                                                                                                       
                                                                                                       
                                                                                                       Librerias y frameworks  
                                                                                                       
- Javascript: 
  > https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript
  > https://www.geeksforgeeks.org/introduction-to-javascript/
                                                                                                       
- Libreria: 
  > https://careerfoundry.com/en/blog/web-development/programming-library-guide/
  > https://www.geeksforgeeks.org/static-vs-dynamic-libraries/
  > https://www.unir.net/ingenieria/revista/librerias-programacion/#:~:text=Una%20librería%20de%20programación%20es,o%20necesidades%20comunes%20de%20desarrollo.
  
- Framework: 
  > https://www.codecademy.com/resources/blog/what-is-a-framework/
  > https://www.geeksforgeeks.org/what-is-a-framework/
  > https://www.freecodecamp.org/news/what-is-a-framework-software-frameworks-definition/
  > https://aws.amazon.com/what-is/framework/
  > https://assemblerinstitute.com/blog/framework-programacion/     
  
- Diferencia entre Libreria y Framework:
  > https://www.shiksha.com/online-courses/articles/framework-vs-library/#Differences-between-Framework-and-Library
  > https://www.mytaskpanel.com/diferencias-librerias-frameworks/#:~:text=Una%20librería%20te%20permite%20solucionar,toda%20una%20experiencia%20de%20desarrollo.
  
- NPM (Node Packager Manager): 
   > https://docs.npmjs.com/about-npm
   > https://www.freecodecamp.org/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/
  
- React: 
  > https://react.dev
  > https://www.simplilearn.com/tutorials/reactjs-tutorial/what-is-reactjs#:~:text=React%20is%20a%20JavaScript-based,frontend%20libraries%20for%20web%20development.

- Redux: 
  > https://redux.js.org/tutorials/fundamentals/part-1-overview#:~:text=Redux%20helps%20you%20manage%20"global,behave%20when%20those%20changes%20occur.
  > https://blog.logrocket.com/understanding-redux-tutorial-examples/#when-use-redux
  > https://www.freecodecamp.org/news/redux-and-redux-toolkit-for-beginners/#:~:text=the%20company%27s%20data.-,Reducers,action)%20%7B%20switch(action.
  
- React-Router: 
  > https://www.geeksforgeeks.org/reactjs-router/ 
  > https://www.simplilearn.com/tutorials/reactjs-tutorial/routing-in-reactjs#:~:text=React%20Router%20is%20a%20JavaScript,preserving%20the%20right%20application%20view.

- React-query (TanStack):
  > https://tanstack.com/query/v5/docs/framework/react/overview#:~:text=TanStack%20Query%20(FKA%20React%20Query,your%20web%20applications%20a%20breeze.
  > https://medium.com/@abdulrafayn001/tanstack-query-improve-your-web-apps-performance-and-reduce-boilerplate-code-708e30aeced3
   
- NextJS:    
  > https://nextjs.org/docs
  > https://en.wikipedia.org/wiki/Next.js
  
- Node JS: 
   > https://nodejs.org/en/learn/getting-started/introduction-to-nodejs
   > https://www.freecodecamp.org/news/what-is-node-js/   
   
- Express: 
  > https://expressjs.com
  > https://www.codecademy.com/article/what-is-express-js

- Gzip: 
  > https://www.godaddy.com/resources/es/crearweb/que-es-y-como-funciona-la-compresion-gzip
  > https://www.imperva.com/learn/performance/gzip/

- Brotli: 
  > https://kinsta.com/blog/brotli-compression/#brotli-compression
  > https://developer.mozilla.org/en-US/docs/Glossary/Brotli_compression
  
- MongoDB: 
  > https://www.mongodb.com/company/what-is-mongodb
  > https://www.geeksforgeeks.org/what-is-mongodb-working-and-features/
  > https://www.ibm.com/topics/mongodb

- Socket.io: 
  > https://socket.io/docs/v4/
  > https://ably.com/topic/socketio

- Passport: 
  > https://www.passportjs.org
  > https://medium.com/@prashantramnyc/node-js-with-passport-authentication-simplified-76ca65ee91e5
  > https://www.passportjs.org/concepts/authentication/sessions/

- Stripe: 
  > https://www.freshbooks.com/hub/payments/what-is-stripe
  > https://www.nerdwallet.com/article/small-business/what-is-stripe

- Typescrypt:
  > https://www.typescriptlang.org
  > https://kinsta.com/knowledgebase/what-is-typescript/

- NestJS: 
  > https://docs.nestjs.com
  > https://kinsta.com/knowledgebase/nestjs/
  
- Docker: 
  > https://docs.docker.com/get-started/overview/
  > https://www.ibm.com/topics/docker
  > https://aws.amazon.com/docker/
  > https://www.redhat.com/es/topics/containers/what-is-docker

- DockerHub:
  > https://www.docker.com/products/docker-hub/
  > https://docs.docker.com/docker-hub/
  > https://www.geeksforgeeks.org/what-is-docker-hub/
  > https://apuntes.de/docker-certificacion-dca/docker-hub/#gsc.tab=0
  
- Kubernetes: 
  > https://kubernetes.io/docs/concepts/overview/
  > https://kubernetes.io/es/docs/concepts/overview/what-is-kubernetes/
  > https://www.ibm.com/topics/kubernetes
    
- Minikube: 
  > https://minikube.sigs.k8s.io/docs/start/
  > https://sysdig.com/learn-cloud-native/kubernetes-101/what-is-minikube/#:~:text=This%20tool%20provides%20an%20easy,with%20and%20test%20Kubernetes%20deployments.
  > https://www2.deloitte.com/es/es/pages/technology/articles/minikube.html


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$                                                                                                                                                                                                           
                                                                                                   Conceptos y definiciones de POO
    
- Objeto: los objetos tienen propiedas especificas, tales como posicion, tamano, color, etc., que definen su estado. Los objetos tambien tienen ciertos comportamientos que los hacen diferentes 
  de otros objetos. Cada objeto forsozamente debe tener tanto atributos como metodos, y se debe crear siempre despues de las clases. Los objetos poseen: 
  + Atributos (Caracteristica, datos o miembros de la clase): Son las descripciones que posee dicho objeto. Es decir, su informacion. Tambien, es una característica de un objeto, que ayuda a definir su estructura y permite diferenciarlo de
    otros objetos. Se define con un identificador y un tipo, el cual indica los valores que puede almacenar. El conjunto de valores de los campos  definen el estado del objeto. En codigo, son unicamente los nombres de algo, como por 
    ejemplo, el color, altura, velocidad, peso o precio, y son de tipo int, string, float, etc.
  + Metodos (acciones, funcionalidades o parametros): Son las acciones o tareas que estas pueden desempenar, como lo son sumar(), encender(), abrir() etc. Se debe crear en un archivo deferente al que se uso para crear una clase. Tambien, 
    son los comportamientos o conductas de un objeto y permite identificar la forma en que actúa respecto a su entorno o respecto a otros objetos. Además, representa una operación o función que un objeto realiza. El conjunto de los métodos 
    de un objeto determinan el comportamiento general del objeto. En codigo, los metodos son las funciones que ejecutaran una accion, por ejemplo: los metodos seters, geters, fucniones void, o aquellas que retornan un valor

- Clase: Es un conjunto de objetos que comparten una estructura y comporamiento comunes. Una clase se debe crear antes que los objetos. Y debe tener el metodo constructor. Se debe crear en un archivo deferente al que se uso para crear una 
  metodo. Se puede crear una clase usando la palabra clave struct, la diferencia es que con struct los miembros se hacen públicos por defecto, mientras que con class se hacen privados por defecto. 
  + De instancia: Son aquellas que se declaran dentro de una clase y que no existen hasta que se hace una instancia de esa clase (se crea un objeto) nombre [ = ];
  + De referencia: Son aquellas que hace referencia a otra clase. Esto se puede definir mejor diciendo que es una variable del tipo de otra clase, y cuando se haga la instancia tendremos: un objeto dentro de otro objeto. nombre [ = ];
  + De clase: Estas variables se declaran antemoniendo la palabra static a su declaración, y a diferencia de las variables de instancia, éstas no necesitan que se haga una instancia (que se cree un objeto), existen desde que se crea la 
    clase.static nombre [ = ];
  + clases abstractas: A veces es posible que nos interese que una clase sea abstracta. Con esto lo que queremos decir es que a veces no tiene finalidad alguna crear un objeto de una clase que no tenga funcionalidad pero represente un 
    concepto de clase útil. Se utilizan solo como clase base, y a traves de ella van a derivar 1 o varias clases para tener clases hijas. NO SE PUEDEN ISNTANCIAR (CREAR) OBJETOS EN ESA CLASE, sino que solamente serviran para crear clases 
    derivadas. Sirven para proporcionar una clase base apropiada a partir de la cual heredan otras clases. Es decir, se le pueden sacar clase derivadas y no se pueden crear objetos.     
  + Clases derivadas: Es la relacion que existe entre dos clases, en la que una clase denominada hija o clase derivada se crea a partir de otra ya existente, denominada clase padre o clase base. Para crear una clase derivada, tras el 
    nombre de la clase, se pondrán dos puntos y el nombre de la clase que se quiere tomar como base. Además, deberemos especificar el tipo de herencia, lo cual se especificará delante del nombre de la clase base. Las clases derivadas 
    pueden acceder a todo lo de la clase principal.
  + Clase padre: La clase de la cual otra deriva directamente. Decimos que la clase A es padre de la clase B si B deriva directamente de A (está conectada directamente en el árbol de jerarquías de las clases).
  + Clase hija: Clase que es derivada directamente de otra. Decimos que la clase B es hija de la clase A si B deriva directamente de A (está conectada directamente en el árbol de jerarquías de las clases).
  + Clase base: Llamamos así a la clase que se halla al inicio del árbol de las jerarquías de clases. La raíz de ese árbol es la clase base o superclase.
  + Clases compuestas: Es aquella clase que entre sus atributos tiene objetos que derivan de otras clases. Es decir, no tienen ningun parentezco ninguna ni otra.
  + Clase contenedora: Al hecho de crear nuevas clases utilizando otras clases como componentes, se le llama composición, y a la clase compuesta se le llama contenedora. Es decir, si alguno de los datos de una clase es a su vez una 
    instancia de otra clase (o de sí misma) a la clase se le llama contenedoras y a las clases albergadas contenidas.

- Constructor: El constructor de un objeto es una función que usamos para crear un nuevo objeto cada vez que sea necesario. Con función constructora podemos inicializar las propiedades del objeto al momento de ser instanciado con new.
  Es un método que se ejecuta automáticamente cuando se define o se crea un objeto, y su función es inicializar el objeto y prepararlo para realizar las operaciones necesarias. Debe tener el mismo nombre de la clase y servira 
  para inicializar los atributos que la misma clase tenga. Las funciones constructoras son una técnica para crear objetos personalizados con valores predeterminados y métodos específicos. Al contrario de la notación de objetos literales,
  las funciones constructoras deben ser llamadas con la palabra clave "new" para asegurar que se está creando un nuevo objeto. Con las funciones constructoras podemos crear varios objetos a partir de una sola función y cada uno podrá 
  tener valores diferentes, algo que no es posible con los objetos literales. Además, las funciones constructoras nos permiten crear métodos específicos para los objetos creados a partir de ellas, lo que nos permite tener un mejor control 
  sobre el comportamiento de los objetos.

- Constructor por defecto: Es aquel en el cual no existe ningun tipo de paramateros y no contiene nada dentro. Tambien inicia todos los atributos con ceros binarios (o bien, no se inicializan). SE UTILIZA PARA LA CREACION DE OBJETOS 
  DINAMICOS. Cuando trabajamos con este tipo de objetos dinamicos, es correcto el usar o no ningun constructor, puesto que, no inicializamos los atributos directamente cuando se crea el arreglo en la funcion principal.

- DESTRUCTOR: [ ~NombreDeVariable(); ] es un método que se ejecuta automáticamente cuando un objeto queda fuera del ámbito en el que se creó, y su función es destruir el objeto, liberando cualquier asignación dinámica de memoria que se 
  haga. Sirve para liberar memoria utilizada al crear los objetos cuando el programa finaliza. Esto cuando nosotros creamos nuestras clases e instanciamos muchos objetos de esas mismas clases y se utiliza mucha memoria en la computadora. 
  El no utilizar el constructor por defecto, puede no afectar nuestro programa, pero cuando manejamos con programas muy largos, es de suma recomendacion utilizarlos. Es un método de una clase cuyo fin es eliminar un objeto de una clase.
  El objeto puede tener o no definidos explícitamente el constructor y el destructor, o tener varios constructores.
          
- Destructor por defecto: Al igual que existe un constructor por defecto, existe un destructor por defecto. Este método, elimina de memoria el objeto al terminarse el ámbito de la variable que lo contiene, recuperando para su uso la 
  porción de memoria que el objeto ocupaba.

      
- this: Se refiere al elemento actual en el que se está escribiendo el código. Cuando se emplea un función constructora para crear un objeto (con la palabra clave new), this está enlazado al nuevo objeto instanciado. This es muy útil para 
  asegurar que se emplean las propiedades del objeto actual. El puntero this es una variable predefinida para todas las funciones u operadores miembro de una clase. Este puntero contiene la dirección del objeto concreto de la clase al 
  que se está aplicando la función o el operador miembro. Se puede decir que *this es un alias del objeto correspondiente. Conviene tener en cuenta que cuando una función miembro se aplica a un objeto de su clase (su argumento 
  implícito), accede directamente a las variables miembro (sin utilizar el operador punto o flecha), pero no tiene forma de referirse al objeto como tal, pues no le ha sido pasado explícitamente como argumento. Ojo, que hace referencia 
  al objeto instanciado y no a la clase.
    
  This hace referencia al objeto actual de la clase, es decir, a una instancia concreta de la clase y nos sirve para usar los métodos y atributos de esa clase desde alguno de sus métodos, para llamar a otro de sus constructores o 
  simplemente para pasarle el objeto completo a algún otro método u objeto.    
      
- Encapsulación (visualizacion de los miembros de la clase): Este concepto permite tener un control de acceso selectivo tanto a los miembros como a los métodos, de tal forma que desde fuera del objeto sólo se pueda acceder a los métodos e 
  identificadores que permita el creador del objeto.
  This principle states that all important information is contained inside an object and only select information is exposed. The implementation and state of each object are privately held inside a defined class. Other objects do not have 
  access to this class or the authority to make changes. They are only able to call a list of public functions or methods. This characteristic of data hiding provides greater program security and avoids unintended data corruption.
  
- Abstracción: Son las características especificas de un objeto, aquellas que lo distinguen de los demás tipos de objetos y que logran definir límites conceptuales respecto a quien está haciendo dicha abstracción del objeto. Una 
  abstracción se enfoca en la visión externa de un objeto, separa el comportamiento específico de un objeto, a esta división que realiza se le conoce como la barrera de abstracción, la cuál se consigue aplicando el principio de mínimo 
  compromiso. La abstracción es el proceso por el cual se descarta toda aquella información que no resulta relevante en un contexto en particular enfatizando algunos de los detalles o propiedades de los objetos. Depende principalmente del 
  interés del observador, permitiendo abstracciones muy diferentes de la misma realidad, debido a esto algunos la clasifican un tanto subjetiva. Y consiste en captar las características y funcionalidades que un objeto desempeña y estos son
  representados en clases por medio de atributos y métodos de dicha clase.
    
    + principio de mínimo compromiso: Se refiere al proceso por el cuál la interfaz de un objeto muestra su comportamientoespecífico y nada más, absolutamente nada más.
    + Interfaz: Una interfaz de objeto permite crear código con el cuál se específica que métodos serán implementados por una clase sin necesidad de definir que harán estos métodos, dichos métodos deben ser públicos.
    + Abstracción de Entidades: Es un objeto que representa un modelo útil de una entidad que se desea.
    + Abstracción de Acciones: Un objeto que representa un conjunto de operaciones y todas ellas desempeñan funciones del mismo tipo.
    + Abstracción de Máquinas virtuales: Un objeto que agrupa operaciones, todas ellas virtuales, utilizadas por algún nivel superior de control u operaciones.
    + Abstracción de coincidencia: Un objeto que almacena un conjunto de operaciones que no tienen relación entre sí.
          
  Abstraction is a process which displays only the information needed and hides the unnecessary information. We can say that the main purpose of abstraction is data hiding. Abstraction means selecting data from a large number of data to 
  show the information needed, which helps in reducing programming complexity and efforts.  
  There are also abstract classes and abstract methods. An abstract class is a type of class that declares one or more abstract methods. An abstract method is a method that has a method definition but not implementation. Once we have 
  modelled our object using data abstraction, the same sets of data can also be used in different applications—abstract classes, generic types of behaviours and object-oriented programming hierarchy. Abstract methods are used when two or 
  more subclasses do the same task in different ways and through different implementations. An abstract class can have both methods, i.e., abstract methods and regular methods.
 
- Herencia: Permite la reutilización y la extensión del código. Permite diseñar nuevas clases a partir de otras ya existentes, pudiéndose además extender sus métodos (cambiar su semántica en la  clase que hereda). Aqui, una clase base o 
  hija, se crea a partir de otra ya existente, las llamadas clase padre o base. La herencia define relaciones jerárquicas entre clases, de forma que atributos y métodos comunes puedan ser reutilizados. Las clases principales extienden 
  atributos y comportamientos a las clases secundarias. A través de la definición en una clase de los atributos y comportamientos básicos, se pueden crear clases secundarias, ampliando así la funcionalidad de la clase principal y 
  agregando atributos y comportamientos adicionales.La herencia es una de las características fundamentales de la Programación Orientada a Objetos por la que, tomando como base una clase ya existente, es posible derivar una nueva, que 
  heredará todos sus miembros, teniendo posibilidad de sobrecargarlos, crear unos nuevos o utilizarlos. La idea básica por tanto, es reutilizar las clases existentes y extender o modificar su semántica.
   
    + Herencia publica: En general, significa que una clase derivada tiene acceso a los elementos protegidos y publicos de su clase base. Los elementos publicos se heredan como elementos publicos; los elementos protegidos permanecen 
      protegidos; los elementos privados no se heredan.
    + Herencia privada: Los miembros publicos y protegidos de la clase base se vuelven miembros privados de la clase derivada. En efecto, los usuarios de la clase derivada no tiene acceso a las facilidades proportcionadas por la clase 
      base. Los miembros privados de la clase base son inaccesibles a las funciones miembro de la clase derivada. 
    + Herencia protegida: Todos los miembros públicos de la clase base adquieren el nivel de acceso protegido en las clases derivadas, mientras que los miembros 
     protegidos conservan su nivel de acceso. Lo anterior indica que una clase derivada puede luego heredar a otra clase los miembros protegidos que heredó de su clase base.
    + Herencia multiple: Es un tipo de herencia en la que una clase hereda los miembros de mas de una clase base. Es decir, existen multiples clases base (padres) para la clase derivada (hija). Esta herencia plantea diferentes problemas 
      tales como la ambiguedad por el uso de nombres identicos en diferentes clases base. Los problemas que se pueden presentar cuando se danan clases con herencia multiple son:
      ~ colisiones de nombres: de diferentes clases base (dos o mas clases base tiene el mismo identificador para algun elemento de su interfaz. Se resuelve con el operador de ambito ::)
      ~ Herencia repetida de una misma clase base (una clase puede heredar indirectamente dos copias de una clase base. Se resuelve con el operador de resolucion de ambito ::)     
     
   Inheritance is a method in which one object acquires/inherits another object’s properties, and inheritance also supports hierarchical classification. The idea behind this is that we can create new classes built on existing classes, 
   i.e., when you inherit from an existing class, we can reuse methods and fields of the parent class. Inheritance represents the parent-child relationship. For example, a whale is a part of the classification of marine animals, which is 
   part of class mammal, which is under that class of animal. We use hierarchical classification, i.e., top-down classification. If we want to describe a more specific class of animals such as mammals, they would have more specific 
   attributes such as teeth; cold-blooded, warm-blooded, etc. This comes under the subclass of animals whereas animals come under the superclass. The subclass is a class which inherits properties of the superclass. This is also called a 
   derived class. A superclass is a base class or parental class from which a subclass inherits properties.
  
- Polimorfismo: Es la posibilidad de definir clases diferentes que tienen métodos o atributos denominados de forma idéntica, pero que se comportan de manera distinta al mismo mensaje. Esto hace referencia al hecho de que varios objetos de 
  diferentes clases, pero con una base común, se pueden usar de manera indistinta, sin tener que saber de qué clase exacta son para poder hacerlo. 
    
   > El concepto de polimorfismo se puede aplicar tanto a funciones como a tipos de datos. Así nacen los conceptos de funciones polimórficas y tipos polimórficos. Las primeras son aquellas funciones que pueden evaluarse o ser aplicadas a 
     diferentes tipos de datos de forma indistinta; los tipos polimórficos, por su parte, son aquellos tipos de datos que contienen al menos un elemento cuyo tipo no está especificado. Permite tratar de forma genérica objetos de distintas 
     clases, ahorrando así código y proporcionando simplicidad. Por tanto, trata de forma genérica objetos de distintos tipos derivados de una misma clase  de objetos.    
     
   > Es la capacidad que tienen ciertos lenguajes para hacer que, al enviar el mismo mensaje (o, en otras palabras, invocar al mismo método) desde distintos objetos, cada uno de esos objetos pueda 
     responder a ese mensaje (o a esa invocación) de forma distinta.     
    
   > Tambien es la capacidad que tienen los objetos de comportarse de múltiples formas sin olvidar que para esto se  requiere de la herencia, en si consiste en hacer referencia a objetos de una clase que puedan tomar comportamientos de 
     objetos descendientes de esta. Con el polimorfismo usamos la generalización olvidando los detalles concretos de los objetos para centrarnos en un punto en común mediante una clase padre.    
    
   > El concepto de polimorfismo se puede aplicar tanto a funciones como a tipos de datos. Así nacen los conceptos de funciones polimórficas y tipos polimórficos. Las primeras son aquellas funciones que pueden evaluarse o ser aplicadas a 
     diferentes tipos de datos de forma indistinta; los tipos polimórficos, por su parte, son aquellos tipos de datos que contienen al menos un elemento cuyo tipo no está especificado.
    
   > En lenguajes basados en clases y con un sistema de tipos de datos fuerte (independientemente de si la verificación se realiza en tiempo de compilación o de ejecución), es posible que el único modo de poder utilizar objetos de manera 
     polimórfica sea que compartan una raíz común, es decir, una jerarquía de clases, ya que esto proporciona la compatibilidad de tipos de datos necesaria para que sea posible utilizar una misma variable de referencia (que podrá apuntar a 
     objetos de diversas subclases de dicha jerarquía) para enviar el mismo mensaje (o un grupo de mensajes) al grupo de objetos que se tratan de manera polimórfica.
    
  El polimorfismo adquiere su maxima potencia cuando se utiliza en union de herencia. Para poder utilizar polimorfismo en C++ se debe tomar en cuenta lo siguiente:
   + Crear una jerarquia de clases con las operaciones importantes definidas por las funciones miembro declaradas como virtuales en la clase base
   + Las implementaciones especificas de las funciones virtuales se deben hacer en las clases derivadas. Cada clase derivada puede tener su propia version de las funciones.
     
  Polymorphism refers to many forms, or it is a process that performs a single action in different ways. It occurs when we have many classes related to each other by inheritance. Polymorphism is of two different types, i.e., compile-time 
  polymorphism and runtime polymorphism. One of the examples of Compile time polymorphism is that when we overload a static method in java. Run time polymorphism also called a dynamic method dispatch is a method in which a call to an 
  overridden method is resolved at run time rather than compile time. In this method, the overridden method is always called through the reference variable. By using method overloading and method overriding, we can perform polymorphism. 
  Generally, the concept of polymorphism is often expressed as one interface, and multiple methods. This reduces complexity by allowing the same interface to be used as a general class of action.       
         
- instanciacion: La instanciacion no es mas que la creacion de un objeto a partir de una clase o a la derivacion de un objeto con otro, la cual se crea desde un inicio. Un objeto creado de una clase tambien de denomina instancia de una
  clase. De esta forma, todos los objetos son instancias de algún otro, menos la clase Object que es la madre de todas. Cuando usted declara una clase, no se reserva memoria para la clase hasta que usted crea un objeto de la clase.
  Por ejemplo, si creamos una clase para un objeto que es para un carro, el cual tenga "velocidad", "potencia" y "color", entonces a partir de eso, podemos definir nuestro primer objeto, digamos "Carro_1", el cual posee las 3 
  caracteristicas mencionadas arriba. Ahora, si queremos instanciar, entonces debemos crear otro objeto, digamos "Carro_2", debera tener exactamente los mismas 3 caracteristicas definidas en un principio. Esto es la instanciacion.
    
- Interfaces: Las interfaces permiten definir contratos que las clases deben cumplir, asegurando que ciertos métodos estén presentes y promoviendo una abstracción adecuada. Una interfaz es un contrato entre dos entidades, esto quiere decir 
  que una interfaz provee un servicio a una clase consumidora. Por ende, la interfaz solo nos muestra la declaración de los métodos que esta posee, no su implementación, permitiendo así su encapsulamiento. 
  Al utilizar interfaces, se fomenta la abstracción, permitiendo que diferentes implementaciones se adhieran a un contrato común.
    
  An interface is a programming structure/syntax that allows the computer to enforce certain properties on an object (class). For example, say we have a car class and a scooter class and a truck class. Each of these three classes should 
  have a start_engine() action. How the "engine is started" for each vehicle is left to each particular class, but the fact that they must have a start_engine action is the domain of the interface
    
- Paquetes: Los paquetes son mecanismos para organizar clases y otros elementos relacionados en un espacio de nombres. La utilización adecuada de paquetes es esencial para proyectos escalables y mantenibles.
  La adopción de interfaces y paquetes en la programación fomenta la escritura de código más limpio y organizado.
  
- Diferencia entre crear objetos e instanciar objetos: De una clase abstracta no se pueden instanciar objetos pero si crear. A continuacion un ejemplo de la sintaxis de cada uno:
   + NombreDeVariable *NombreDeVariable[2]; - Creamos un objeto
   + NombreDeVariable[0] = new OtraVariable(7,4); - instanciamos 2 objeto a partir del arreglo de objetos creado. Dicha instanciacion se crea a partir de la clase derivada, no de la clase base.
     Instancia significa simplemente crear una referencia(copia) o a la derivacion de un objeto con otro, mientras que crear un objeto (o instanciar una clase) significa cuando le damos vida a una clase que acabamos de crear utilizando la 
     palabra reservada "new", y que la ubicación de la memoria está asociada con el objeto (es una entidad en tiempo de ejecución de la clase) mediante el uso del nuevo operador. En palabras simples, Instancia se refiere a la copia del 
     objeto en un momento particular, mientras que objeto se refiere a la dirección de memoria de la clase.

- Miembros static de una clase: Miembros estaticos (static): Un dato declarado estático en una clase es un dato de una sola instancia, se crea al definir la clase y sólo existirá uno, independientemente del número de objetos que se creen. 
  Esto es bueno cuando todos los objetos van a compartir una misma variable. Los atributos de tipo "static" NO SE PUEDEN INICIALIZAR DENTRO DE LA CLASE, SINO FUERA DE ELLA. Los atributos pertenecen a la clase y no a los objetos, similar a 
  las  variables locales y globales. Es decir, se crea un atributo estatico y todos los objetos tendran el mismo valor para el mismo atributo. En el caso de los metodos de tipo "static" sucede exactamente lo mismo. Los miembros YA NO le
  pertenecen a los objetos instanciados, sino a la clase. Los métodos estáticos son llamados sin instanciar su clase. Son habitualmente utilizados para crear funciones para una aplicación.
  Permite el acceso a métodos y variables de clase sin la necesidad de instanciar un objeto de dicha clase, permitiendo la inicialización de forma cómoda y durante la carga de clase.
    
  El hecho de no poder disponer de "this" dentro de un método estático es debido a que el método no se invoca con relación a ningún objeto. Como has visto, usamos el nombre de la clase para invocarlo y no un objeto instanciado. Como sabes, 
  "this" tiene una referencia al objeto donde se lanzó un mensaje (el objeto sobre el que se invocó un método). Como no existe tal objeto de invocación, no existe un objeto en "this". En principio podríamos pensar que "this" entonces 
  valdrá "undefined", pero lo que hay en realidad es el código de la propia clase.
    
  The static keyword defines a static method or field for a class, or a static initialization block. Static properties cannot be directly accessed on instances of the class. Instead, they're accessed on the class itself.
  Static methods are often utility functions, such as functions to create or clone objects, whereas static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.


- Modificadores de acceso
   > Publico (public: ) = Un miembro público es accesible en cualquier lugar en el que exista un objeto de la clase. El modificador public ofrece la máxima visibilidad, una variable, método o clase con modificador public será visible desde 
     cualquier clase, aunque estén en paquetes distintos 
   > Protegidos (protected:) = Un miembro protegido sólo es accesible desde las clases que se hereden de la clase que lo contiene. Es visible para las clases que se encuentren en el mismo paquete y para cualquier subclase de esta aunque 
     este en otro paquete. Este modificador es utilizado normalmente para Herencias, así que lo estudiaremos más a fondo cuando lleguemos a las Herencias.
   > Privados (private: ) = Es miembro privado sólo es accesible por los métodos de la clase a la que pertenece. Cuando un método o atributo (variable) es declarada como private, su uso         
     queda restringido al interior de la misma clase, no siendo visible para el resto. Una clase no puede ser Private, sólo atributos y métodos.

     Puede ser accedido desde:	                     public       protected       default      private 
     Su misma clase                                   SI	          SI	         SI            SI
     Cualquier clase que esté en el mismo paquete     SI	          SI             SI            NO
     Cualquier subclase que esté en otro paquete      SI             SI	         NO            NO
     Cualquier otra clase que esté en otro paquete    SI	          NO             NO            NO     
     
     
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$                                                                                                       

  